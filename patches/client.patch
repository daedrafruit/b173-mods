--- net/minecraft/src/RenderList.java
+++ net/minecraft/src/RenderList.java
@@ -4,12 +4,16 @@
 import org.lwjgl.opengl.GL11;
 
 public class RenderList {
+	private ModConfig config = new ModConfig("FarLandFixConfig.txt", "# Far Land Fixes\n# Fix jitter at far coordinates\nFixFarJitter=1\n# Fix sand/gravel behaving strangely at far coordinates\nFixFarGravityBlocks=1\n");
 	private int field_1242_a;
 	private int field_1241_b;
 	private int field_1240_c;
 	private float field_1239_d;
 	private float field_1238_e;
 	private float field_1237_f;
+	private double field_1239_dd;
+	private double field_1238_ed;
+	private double field_1237_fd;
 	private IntBuffer field_1236_g = GLAllocation.createDirectIntBuffer(65536);
 	private boolean field_1235_h = false;
 	private boolean field_1234_i = false;
@@ -20,9 +24,16 @@
 		this.field_1242_a = var1;
 		this.field_1241_b = var2;
 		this.field_1240_c = var3;
-		this.field_1239_d = (float)var4;
-		this.field_1238_e = (float)var6;
-		this.field_1237_f = (float)var8;
+		if(this.config.getProperty("FixFarJitter").equals("1")) {
+			this.field_1239_dd = var4;
+			this.field_1238_ed = var6;
+			this.field_1237_fd = var8;
+		} else {
+			this.field_1239_d = (float)var4;
+			this.field_1238_e = (float)var6;
+			this.field_1237_f = (float)var8;
+		}
+
 	}
 
 	public boolean func_862_a(int var1, int var2, int var3) {
@@ -46,12 +57,17 @@
 
 			if(this.field_1236_g.remaining() > 0) {
 				GL11.glPushMatrix();
-				GL11.glTranslatef((float)this.field_1242_a - this.field_1239_d, (float)this.field_1241_b - this.field_1238_e, (float)this.field_1240_c - this.field_1237_f);
+				if(this.config.getProperty("FixFarJitter").equals("1")) {
+					GL11.glTranslated((double)this.field_1242_a - this.field_1239_dd, (double)this.field_1241_b - this.field_1238_ed, (double)this.field_1240_c - this.field_1237_fd);
+				} else {
+					GL11.glTranslatef((float)this.field_1242_a - this.field_1239_d, (float)this.field_1241_b - this.field_1238_e, (float)this.field_1240_c - this.field_1237_f);
+				}
+
 				GL11.glCallLists(this.field_1236_g);
 				GL11.glPopMatrix();
 			}
-
 		}
+
 	}
 
 	public void func_859_b() {
--- net/minecraft/src/ItemSpade.java
+++ net/minecraft/src/ItemSpade.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public class ItemSpade extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.grass, Block.dirt, Block.sand, Block.gravel, Block.snow, Block.blockSnow, Block.blockClay, Block.tilledField};
+	private static Block[] blocksEffectiveAgainst = new Block[]{Block.grass, Block.dirt, Block.sand, Block.gravel, Block.snow, Block.blockSnow, Block.blockClay, Block.tilledField, Block.slowSand};
 
 	public ItemSpade(int var1, EnumToolMaterial var2) {
 		super(var1, 1, var2, blocksEffectiveAgainst);
--- net/minecraft/src/RenderBlocks.java
+++ net/minecraft/src/RenderBlocks.java
@@ -92,7 +92,209 @@
 	public boolean renderBlockByRenderType(Block var1, int var2, int var3, int var4) {
 		int var5 = var1.getRenderType();
 		var1.setBlockBoundsBasedOnState(this.blockAccess, var2, var3, var4);
-		return var5 == 0 ? this.renderStandardBlock(var1, var2, var3, var4) : (var5 == 4 ? this.renderBlockFluids(var1, var2, var3, var4) : (var5 == 13 ? this.renderBlockCactus(var1, var2, var3, var4) : (var5 == 1 ? this.renderBlockReed(var1, var2, var3, var4) : (var5 == 6 ? this.renderBlockCrops(var1, var2, var3, var4) : (var5 == 2 ? this.renderBlockTorch(var1, var2, var3, var4) : (var5 == 3 ? this.renderBlockFire(var1, var2, var3, var4) : (var5 == 5 ? this.renderBlockRedstoneWire(var1, var2, var3, var4) : (var5 == 8 ? this.renderBlockLadder(var1, var2, var3, var4) : (var5 == 7 ? this.renderBlockDoor(var1, var2, var3, var4) : (var5 == 9 ? this.renderBlockMinecartTrack((BlockRail)var1, var2, var3, var4) : (var5 == 10 ? this.renderBlockStairs(var1, var2, var3, var4) : (var5 == 11 ? this.renderBlockFence(var1, var2, var3, var4) : (var5 == 12 ? this.renderBlockLever(var1, var2, var3, var4) : (var5 == 14 ? this.renderBlockBed(var1, var2, var3, var4) : (var5 == 15 ? this.renderBlockRepeater(var1, var2, var3, var4) : (var5 == 16 ? this.func_31074_b(var1, var2, var3, var4, false) : (var5 == 17 ? this.func_31080_c(var1, var2, var3, var4, true) : false)))))))))))))))));
+		return var5 == 0 ? this.renderStandardBlock(var1, var2, var3, var4) : (var5 == 4 ? this.renderBlockFluids(var1, var2, var3, var4) : (var5 == 13 ? this.renderBlockCactus(var1, var2, var3, var4) : (var5 == 1 ? this.renderBlockReed(var1, var2, var3, var4) : (var5 == 6 ? this.renderBlockCrops(var1, var2, var3, var4) : (var5 == 2 ? this.renderBlockTorch(var1, var2, var3, var4) : (var5 == 3 ? this.renderBlockFire(var1, var2, var3, var4) : (var5 == 5 ? this.renderBlockRedstoneWire(var1, var2, var3, var4) : (var5 == 8 ? this.renderBlockLadder(var1, var2, var3, var4) : (var5 == 7 ? this.renderBlockDoor(var1, var2, var3, var4) : (var5 == 9 ? this.renderBlockMinecartTrack((BlockRail)var1, var2, var3, var4) : (var5 == 10 ? this.renderBlockStairs(var1, var2, var3, var4) : (var5 == 11 ? this.renderBlockFence(var1, var2, var3, var4) : (var5 == 12 ? this.renderBlockLever(var1, var2, var3, var4) : (var5 == 14 ? this.renderBlockBed(var1, var2, var3, var4) : (var5 == 15 ? this.renderBlockRepeater(var1, var2, var3, var4) : (var5 == 16 ? this.func_31074_b(var1, var2, var3, var4, false) : (var5 == 17 ? this.func_31080_c(var1, var2, var3, var4, true) : (var5 == 21 ? this.renderBlockFenceGate(var1, var2, var3, var4) : false))))))))))))))))));
+	}
+
+	public boolean renderBlockFenceGate(Block var1, int var2, int var3, int var4) {
+		boolean var5 = true;
+		int var6 = this.blockAccess.getBlockMetadata(var2, var3, var4);
+		boolean var7 = BlockFenceGate.isFenceGateOpen(var6);
+		int var8 = BlockFenceGate.func_35290_f(var6);
+		float var9;
+		float var10;
+		float var11;
+		float var12;
+		if(var8 != 3 && var8 != 1) {
+			var9 = 0.0F;
+			var10 = 2.0F / 16.0F;
+			var11 = 7.0F / 16.0F;
+			var12 = 9.0F / 16.0F;
+			var1.setBlockBounds(var9, 5.0F / 16.0F, var11, var10, 1.0F, var12);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var9 = 14.0F / 16.0F;
+			var10 = 1.0F;
+			var1.setBlockBounds(var9, 5.0F / 16.0F, var11, var10, 1.0F, var12);
+			this.renderStandardBlock(var1, var2, var3, var4);
+		} else {
+			var9 = 7.0F / 16.0F;
+			var10 = 9.0F / 16.0F;
+			var11 = 0.0F;
+			var12 = 2.0F / 16.0F;
+			var1.setBlockBounds(var9, 5.0F / 16.0F, var11, var10, 1.0F, var12);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var11 = 14.0F / 16.0F;
+			var12 = 1.0F;
+			var1.setBlockBounds(var9, 5.0F / 16.0F, var11, var10, 1.0F, var12);
+			this.renderStandardBlock(var1, var2, var3, var4);
+		}
+
+		if(!var7) {
+			if(var8 != 3 && var8 != 1) {
+				var9 = 6.0F / 16.0F;
+				var10 = 0.5F;
+				var11 = 7.0F / 16.0F;
+				var12 = 9.0F / 16.0F;
+				var1.setBlockBounds(var9, 6.0F / 16.0F, var11, var10, 15.0F / 16.0F, var12);
+				this.renderStandardBlock(var1, var2, var3, var4);
+				var9 = 0.5F;
+				var10 = 10.0F / 16.0F;
+				var1.setBlockBounds(var9, 6.0F / 16.0F, var11, var10, 15.0F / 16.0F, var12);
+				this.renderStandardBlock(var1, var2, var3, var4);
+				var9 = 10.0F / 16.0F;
+				var10 = 14.0F / 16.0F;
+				var1.setBlockBounds(var9, 6.0F / 16.0F, var11, var10, 9.0F / 16.0F, var12);
+				this.renderStandardBlock(var1, var2, var3, var4);
+				var1.setBlockBounds(var9, 12.0F / 16.0F, var11, var10, 15.0F / 16.0F, var12);
+				this.renderStandardBlock(var1, var2, var3, var4);
+				var9 = 2.0F / 16.0F;
+				var10 = 6.0F / 16.0F;
+				var1.setBlockBounds(var9, 6.0F / 16.0F, var11, var10, 9.0F / 16.0F, var12);
+				this.renderStandardBlock(var1, var2, var3, var4);
+				var1.setBlockBounds(var9, 12.0F / 16.0F, var11, var10, 15.0F / 16.0F, var12);
+				this.renderStandardBlock(var1, var2, var3, var4);
+			} else {
+				var9 = 7.0F / 16.0F;
+				var10 = 9.0F / 16.0F;
+				var11 = 6.0F / 16.0F;
+				var12 = 0.5F;
+				var1.setBlockBounds(var9, 6.0F / 16.0F, var11, var10, 15.0F / 16.0F, var12);
+				this.renderStandardBlock(var1, var2, var3, var4);
+				var11 = 0.5F;
+				var12 = 10.0F / 16.0F;
+				var1.setBlockBounds(var9, 6.0F / 16.0F, var11, var10, 15.0F / 16.0F, var12);
+				this.renderStandardBlock(var1, var2, var3, var4);
+				var11 = 10.0F / 16.0F;
+				var12 = 14.0F / 16.0F;
+				var1.setBlockBounds(var9, 6.0F / 16.0F, var11, var10, 9.0F / 16.0F, var12);
+				this.renderStandardBlock(var1, var2, var3, var4);
+				var1.setBlockBounds(var9, 12.0F / 16.0F, var11, var10, 15.0F / 16.0F, var12);
+				this.renderStandardBlock(var1, var2, var3, var4);
+				var11 = 2.0F / 16.0F;
+				var12 = 6.0F / 16.0F;
+				var1.setBlockBounds(var9, 6.0F / 16.0F, var11, var10, 9.0F / 16.0F, var12);
+				this.renderStandardBlock(var1, var2, var3, var4);
+				var1.setBlockBounds(var9, 12.0F / 16.0F, var11, var10, 15.0F / 16.0F, var12);
+				this.renderStandardBlock(var1, var2, var3, var4);
+			}
+		} else if(var8 == 3) {
+			var1.setBlockBounds(13.0F / 16.0F, 6.0F / 16.0F, 0.0F, 15.0F / 16.0F, 15.0F / 16.0F, 2.0F / 16.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(13.0F / 16.0F, 6.0F / 16.0F, 14.0F / 16.0F, 15.0F / 16.0F, 15.0F / 16.0F, 1.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(9.0F / 16.0F, 6.0F / 16.0F, 0.0F, 13.0F / 16.0F, 9.0F / 16.0F, 2.0F / 16.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(9.0F / 16.0F, 6.0F / 16.0F, 14.0F / 16.0F, 13.0F / 16.0F, 9.0F / 16.0F, 1.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(9.0F / 16.0F, 12.0F / 16.0F, 0.0F, 13.0F / 16.0F, 15.0F / 16.0F, 2.0F / 16.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(9.0F / 16.0F, 12.0F / 16.0F, 14.0F / 16.0F, 13.0F / 16.0F, 15.0F / 16.0F, 1.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+		} else if(var8 == 1) {
+			var1.setBlockBounds(1.0F / 16.0F, 6.0F / 16.0F, 0.0F, 3.0F / 16.0F, 15.0F / 16.0F, 2.0F / 16.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(1.0F / 16.0F, 6.0F / 16.0F, 14.0F / 16.0F, 3.0F / 16.0F, 15.0F / 16.0F, 1.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(3.0F / 16.0F, 6.0F / 16.0F, 0.0F, 7.0F / 16.0F, 9.0F / 16.0F, 2.0F / 16.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(3.0F / 16.0F, 6.0F / 16.0F, 14.0F / 16.0F, 7.0F / 16.0F, 9.0F / 16.0F, 1.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(3.0F / 16.0F, 12.0F / 16.0F, 0.0F, 7.0F / 16.0F, 15.0F / 16.0F, 2.0F / 16.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(3.0F / 16.0F, 12.0F / 16.0F, 14.0F / 16.0F, 7.0F / 16.0F, 15.0F / 16.0F, 1.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+		} else if(var8 == 0) {
+			var1.setBlockBounds(0.0F, 6.0F / 16.0F, 13.0F / 16.0F, 2.0F / 16.0F, 15.0F / 16.0F, 15.0F / 16.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(14.0F / 16.0F, 6.0F / 16.0F, 13.0F / 16.0F, 1.0F, 15.0F / 16.0F, 15.0F / 16.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(0.0F, 6.0F / 16.0F, 9.0F / 16.0F, 2.0F / 16.0F, 9.0F / 16.0F, 13.0F / 16.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(14.0F / 16.0F, 6.0F / 16.0F, 9.0F / 16.0F, 1.0F, 9.0F / 16.0F, 13.0F / 16.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(0.0F, 12.0F / 16.0F, 9.0F / 16.0F, 2.0F / 16.0F, 15.0F / 16.0F, 13.0F / 16.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(14.0F / 16.0F, 12.0F / 16.0F, 9.0F / 16.0F, 1.0F, 15.0F / 16.0F, 13.0F / 16.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+		} else if(var8 == 2) {
+			var1.setBlockBounds(0.0F, 6.0F / 16.0F, 1.0F / 16.0F, 2.0F / 16.0F, 15.0F / 16.0F, 3.0F / 16.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(14.0F / 16.0F, 6.0F / 16.0F, 1.0F / 16.0F, 1.0F, 15.0F / 16.0F, 3.0F / 16.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(0.0F, 6.0F / 16.0F, 3.0F / 16.0F, 2.0F / 16.0F, 9.0F / 16.0F, 7.0F / 16.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(14.0F / 16.0F, 6.0F / 16.0F, 3.0F / 16.0F, 1.0F, 9.0F / 16.0F, 7.0F / 16.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(0.0F, 12.0F / 16.0F, 3.0F / 16.0F, 2.0F / 16.0F, 15.0F / 16.0F, 7.0F / 16.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var1.setBlockBounds(14.0F / 16.0F, 12.0F / 16.0F, 3.0F / 16.0F, 1.0F, 15.0F / 16.0F, 7.0F / 16.0F);
+			this.renderStandardBlock(var1, var2, var3, var4);
+		}
+
+		var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+		return var5;
+	}
+
+	public boolean renderBlockFence(Block var1, int var2, int var3, int var4) {
+		boolean var5 = false;
+		float var6 = 6.0F / 16.0F;
+		float var7 = 10.0F / 16.0F;
+		var1.setBlockBounds(var6, 0.0F, var6, var7, 1.0F, var7);
+		this.renderStandardBlock(var1, var2, var3, var4);
+		var5 = true;
+		boolean var8 = false;
+		boolean var9 = false;
+		if(this.blockAccess.getBlockId(var2 - 1, var3, var4) == var1.blockID || this.blockAccess.getBlockId(var2 - 1, var3, var4) == Block.fenceGate.blockID || this.blockAccess.getBlockId(var2 + 1, var3, var4) == var1.blockID || this.blockAccess.getBlockId(var2 + 1, var3, var4) == Block.fenceGate.blockID) {
+			var8 = true;
+		}
+
+		if(this.blockAccess.getBlockId(var2, var3, var4 - 1) == var1.blockID || this.blockAccess.getBlockId(var2, var3, var4 - 1) == Block.fenceGate.blockID || this.blockAccess.getBlockId(var2, var3, var4 + 1) == var1.blockID || this.blockAccess.getBlockId(var2, var3, var4 + 1) == Block.fenceGate.blockID) {
+			var9 = true;
+		}
+
+		boolean var10 = this.blockAccess.getBlockId(var2 - 1, var3, var4) == var1.blockID || this.blockAccess.getBlockId(var2 - 1, var3, var4) == Block.fenceGate.blockID;
+		boolean var11 = this.blockAccess.getBlockId(var2 + 1, var3, var4) == var1.blockID || this.blockAccess.getBlockId(var2 + 1, var3, var4) == Block.fenceGate.blockID;
+		boolean var12 = this.blockAccess.getBlockId(var2, var3, var4 - 1) == var1.blockID || this.blockAccess.getBlockId(var2, var3, var4 - 1) == Block.fenceGate.blockID;
+		boolean var13 = this.blockAccess.getBlockId(var2, var3, var4 + 1) == var1.blockID || this.blockAccess.getBlockId(var2, var3, var4 + 1) == Block.fenceGate.blockID;
+		if(!var8 && !var9) {
+			var8 = true;
+		}
+
+		var6 = 7.0F / 16.0F;
+		var7 = 9.0F / 16.0F;
+		float var14 = 12.0F / 16.0F;
+		float var15 = 15.0F / 16.0F;
+		float var16 = var10 ? 0.0F : var6;
+		float var17 = var11 ? 1.0F : var7;
+		float var18 = var12 ? 0.0F : var6;
+		float var19 = var13 ? 1.0F : var7;
+		if(var8) {
+			var1.setBlockBounds(var16, var14, var6, var17, var15, var7);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var5 = true;
+		}
+
+		if(var9) {
+			var1.setBlockBounds(var6, var14, var18, var7, var15, var19);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var5 = true;
+		}
+
+		var14 = 6.0F / 16.0F;
+		var15 = 9.0F / 16.0F;
+		if(var8) {
+			var1.setBlockBounds(var16, var14, var6, var17, var15, var7);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var5 = true;
+		}
+
+		if(var9) {
+			var1.setBlockBounds(var6, var14, var18, var7, var15, var19);
+			this.renderStandardBlock(var1, var2, var3, var4);
+			var5 = true;
+		}
+
+		var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+		return var5;
 	}
 
 	private boolean renderBlockBed(Block var1, int var2, int var3, int var4) {
@@ -104,132 +306,132 @@
 		float var10 = 1.0F;
 		float var11 = 0.8F;
 		float var12 = 0.6F;
-		float var25 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		var5.setColorOpaque_F(var9 * var25, var9 * var25, var9 * var25);
-		int var26 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 0);
-		int var27 = (var26 & 15) << 4;
-		int var28 = var26 & 240;
-		double var29 = (double)((float)var27 / 256.0F);
-		double var31 = ((double)(var27 + 16) - 0.01D) / 256.0D;
-		double var33 = (double)((float)var28 / 256.0F);
-		double var35 = ((double)(var28 + 16) - 0.01D) / 256.0D;
-		double var37 = (double)var2 + var1.minX;
-		double var39 = (double)var2 + var1.maxX;
-		double var41 = (double)var3 + var1.minY + 0.1875D;
-		double var43 = (double)var4 + var1.minZ;
-		double var45 = (double)var4 + var1.maxZ;
-		var5.addVertexWithUV(var37, var41, var45, var29, var35);
-		var5.addVertexWithUV(var37, var41, var43, var29, var33);
-		var5.addVertexWithUV(var39, var41, var43, var31, var33);
-		var5.addVertexWithUV(var39, var41, var45, var31, var35);
-		float var64 = var1.getBlockBrightness(this.blockAccess, var2, var3 + 1, var4);
-		var5.setColorOpaque_F(var10 * var64, var10 * var64, var10 * var64);
-		var27 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 1);
-		var28 = (var27 & 15) << 4;
-		int var67 = var27 & 240;
-		double var30 = (double)((float)var28 / 256.0F);
-		double var32 = ((double)(var28 + 16) - 0.01D) / 256.0D;
-		double var34 = (double)((float)var67 / 256.0F);
-		double var36 = ((double)(var67 + 16) - 0.01D) / 256.0D;
-		double var38 = var30;
-		double var40 = var32;
-		double var42 = var34;
-		double var44 = var34;
-		double var46 = var30;
-		double var48 = var32;
-		double var50 = var36;
-		double var52 = var36;
+		float var13 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
+		var5.setColorOpaque_F(var9 * var13, var9 * var13, var9 * var13);
+		int var14 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 0);
+		int var15 = (var14 & 15) << 4;
+		int var16 = var14 & 240;
+		double var17 = (double)((float)var15 / 256.0F);
+		double var19 = ((double)(var15 + 16) - 0.01D) / 256.0D;
+		double var21 = (double)((float)var16 / 256.0F);
+		double var23 = ((double)(var16 + 16) - 0.01D) / 256.0D;
+		double var25 = (double)var2 + var1.minX;
+		double var27 = (double)var2 + var1.maxX;
+		double var29 = (double)var3 + var1.minY + 0.1875D;
+		double var31 = (double)var4 + var1.minZ;
+		double var33 = (double)var4 + var1.maxZ;
+		var5.addVertexWithUV(var25, var29, var33, var17, var23);
+		var5.addVertexWithUV(var25, var29, var31, var17, var21);
+		var5.addVertexWithUV(var27, var29, var31, var19, var21);
+		var5.addVertexWithUV(var27, var29, var33, var19, var23);
+		float var35 = var1.getBlockBrightness(this.blockAccess, var2, var3 + 1, var4);
+		var5.setColorOpaque_F(var10 * var35, var10 * var35, var10 * var35);
+		var15 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 1);
+		var16 = (var15 & 15) << 4;
+		int var36 = var15 & 240;
+		double var37 = (double)((float)var16 / 256.0F);
+		double var39 = ((double)(var16 + 16) - 0.01D) / 256.0D;
+		double var41 = (double)((float)var36 / 256.0F);
+		double var43 = ((double)(var36 + 16) - 0.01D) / 256.0D;
+		double var45 = var37;
+		double var47 = var39;
+		double var49 = var41;
+		double var51 = var41;
+		double var53 = var37;
+		double var55 = var39;
+		double var57 = var43;
+		double var59 = var43;
 		if(var7 == 0) {
-			var40 = var30;
-			var42 = var36;
-			var46 = var32;
-			var52 = var34;
+			var47 = var37;
+			var49 = var43;
+			var53 = var39;
+			var59 = var41;
 		} else if(var7 == 2) {
-			var38 = var32;
-			var44 = var36;
-			var48 = var30;
-			var50 = var34;
+			var45 = var39;
+			var51 = var43;
+			var55 = var37;
+			var57 = var41;
 		} else if(var7 == 3) {
-			var38 = var32;
-			var44 = var36;
-			var48 = var30;
-			var50 = var34;
-			var40 = var30;
-			var42 = var36;
-			var46 = var32;
-			var52 = var34;
+			var45 = var39;
+			var51 = var43;
+			var55 = var37;
+			var57 = var41;
+			var47 = var37;
+			var49 = var43;
+			var53 = var39;
+			var59 = var41;
 		}
 
-		double var54 = (double)var2 + var1.minX;
-		double var56 = (double)var2 + var1.maxX;
-		double var58 = (double)var3 + var1.maxY;
-		double var60 = (double)var4 + var1.minZ;
-		double var62 = (double)var4 + var1.maxZ;
-		var5.addVertexWithUV(var56, var58, var62, var46, var50);
-		var5.addVertexWithUV(var56, var58, var60, var38, var42);
-		var5.addVertexWithUV(var54, var58, var60, var40, var44);
-		var5.addVertexWithUV(var54, var58, var62, var48, var52);
-		var26 = ModelBed.field_22280_a[var7];
+		double var61 = (double)var2 + var1.minX;
+		double var63 = (double)var2 + var1.maxX;
+		double var65 = (double)var3 + var1.maxY;
+		double var67 = (double)var4 + var1.minZ;
+		double var69 = (double)var4 + var1.maxZ;
+		var5.addVertexWithUV(var63, var65, var69, var53, var57);
+		var5.addVertexWithUV(var63, var65, var67, var45, var49);
+		var5.addVertexWithUV(var61, var65, var67, var47, var51);
+		var5.addVertexWithUV(var61, var65, var69, var55, var59);
+		var14 = ModelBed.field_22280_a[var7];
 		if(var8) {
-			var26 = ModelBed.field_22280_a[ModelBed.field_22279_b[var7]];
+			var14 = ModelBed.field_22280_a[ModelBed.field_22279_b[var7]];
 		}
 
-		byte var65 = 4;
+		byte var71 = 4;
 		switch(var7) {
 		case 0:
-			var65 = 5;
+			var71 = 5;
 			break;
 		case 1:
-			var65 = 3;
+			var71 = 3;
 		case 2:
 		default:
 			break;
 		case 3:
-			var65 = 2;
+			var71 = 2;
 		}
 
-		float var66;
-		if(var26 != 2 && (this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 - 1, 2))) {
-			var66 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 - 1);
+		float var72;
+		if(var14 != 2 && (this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 - 1, 2))) {
+			var72 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 - 1);
 			if(var1.minZ > 0.0D) {
-				var66 = var25;
+				var72 = var13;
 			}
 
-			var5.setColorOpaque_F(var11 * var66, var11 * var66, var11 * var66);
-			this.flipTexture = var65 == 2;
+			var5.setColorOpaque_F(var11 * var72, var11 * var72, var11 * var72);
+			this.flipTexture = var71 == 2;
 			this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 2));
 		}
 
-		if(var26 != 3 && (this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 + 1, 3))) {
-			var66 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 + 1);
+		if(var14 != 3 && (this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 + 1, 3))) {
+			var72 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 + 1);
 			if(var1.maxZ < 1.0D) {
-				var66 = var25;
+				var72 = var13;
 			}
 
-			var5.setColorOpaque_F(var11 * var66, var11 * var66, var11 * var66);
-			this.flipTexture = var65 == 3;
+			var5.setColorOpaque_F(var11 * var72, var11 * var72, var11 * var72);
+			this.flipTexture = var71 == 3;
 			this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 3));
 		}
 
-		if(var26 != 4 && (this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 - 1, var3, var4, 4))) {
-			var66 = var1.getBlockBrightness(this.blockAccess, var2 - 1, var3, var4);
+		if(var14 != 4 && (this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 - 1, var3, var4, 4))) {
+			var72 = var1.getBlockBrightness(this.blockAccess, var2 - 1, var3, var4);
 			if(var1.minX > 0.0D) {
-				var66 = var25;
+				var72 = var13;
 			}
 
-			var5.setColorOpaque_F(var12 * var66, var12 * var66, var12 * var66);
-			this.flipTexture = var65 == 4;
+			var5.setColorOpaque_F(var12 * var72, var12 * var72, var12 * var72);
+			this.flipTexture = var71 == 4;
 			this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 4));
 		}
 
-		if(var26 != 5 && (this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 + 1, var3, var4, 5))) {
-			var66 = var1.getBlockBrightness(this.blockAccess, var2 + 1, var3, var4);
+		if(var14 != 5 && (this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 + 1, var3, var4, 5))) {
+			var72 = var1.getBlockBrightness(this.blockAccess, var2 + 1, var3, var4);
 			if(var1.maxX < 1.0D) {
-				var66 = var25;
+				var72 = var13;
 			}
 
-			var5.setColorOpaque_F(var12 * var66, var12 * var66, var12 * var66);
-			this.flipTexture = var65 == 5;
+			var5.setColorOpaque_F(var12 * var72, var12 * var72, var12 * var72);
+			this.flipTexture = var71 == 5;
 			this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 5));
 		}
 
@@ -525,9 +727,9 @@
 	private boolean func_31080_c(Block var1, int var2, int var3, int var4, boolean var5) {
 		int var6 = this.blockAccess.getBlockMetadata(var2, var3, var4);
 		int var7 = BlockPistonExtension.func_31050_c(var6);
-		float var11 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-		float var12 = var5 ? 1.0F : 0.5F;
-		double var13 = var5 ? 16.0D : 8.0D;
+		float var8 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
+		float var9 = var5 ? 1.0F : 0.5F;
+		double var10 = var5 ? 16.0D : 8.0D;
 		switch(var7) {
 		case 0:
 			this.field_31087_g = 3;
@@ -536,28 +738,28 @@
 			this.field_31084_j = 3;
 			var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.25F, 1.0F);
 			this.renderStandardBlock(var1, var2, var3, var4);
-			this.func_31076_a((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 + 0.25F), (double)((float)var3 + 0.25F + var12), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var11 * 0.8F, var13);
-			this.func_31076_a((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 + 0.25F), (double)((float)var3 + 0.25F + var12), (double)((float)var4 + 6.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var11 * 0.8F, var13);
-			this.func_31076_a((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 + 0.25F), (double)((float)var3 + 0.25F + var12), (double)((float)var4 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var11 * 0.6F, var13);
-			this.func_31076_a((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 + 0.25F), (double)((float)var3 + 0.25F + var12), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var11 * 0.6F, var13);
+			this.func_31076_a((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 + 0.25F), (double)((float)var3 + 0.25F + var9), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var8 * 0.8F, var10);
+			this.func_31076_a((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 + 0.25F), (double)((float)var3 + 0.25F + var9), (double)((float)var4 + 6.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var8 * 0.8F, var10);
+			this.func_31076_a((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 + 0.25F), (double)((float)var3 + 0.25F + var9), (double)((float)var4 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var8 * 0.6F, var10);
+			this.func_31076_a((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 + 0.25F), (double)((float)var3 + 0.25F + var9), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var8 * 0.6F, var10);
 			break;
 		case 1:
 			var1.setBlockBounds(0.0F, 12.0F / 16.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 			this.renderStandardBlock(var1, var2, var3, var4);
-			this.func_31076_a((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 - 0.25F + 1.0F - var12), (double)((float)var3 - 0.25F + 1.0F), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var11 * 0.8F, var13);
-			this.func_31076_a((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 - 0.25F + 1.0F - var12), (double)((float)var3 - 0.25F + 1.0F), (double)((float)var4 + 6.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var11 * 0.8F, var13);
-			this.func_31076_a((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 - 0.25F + 1.0F - var12), (double)((float)var3 - 0.25F + 1.0F), (double)((float)var4 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var11 * 0.6F, var13);
-			this.func_31076_a((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 - 0.25F + 1.0F - var12), (double)((float)var3 - 0.25F + 1.0F), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var11 * 0.6F, var13);
+			this.func_31076_a((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 - 0.25F + 1.0F - var9), (double)((float)var3 - 0.25F + 1.0F), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var8 * 0.8F, var10);
+			this.func_31076_a((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 - 0.25F + 1.0F - var9), (double)((float)var3 - 0.25F + 1.0F), (double)((float)var4 + 6.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var8 * 0.8F, var10);
+			this.func_31076_a((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 - 0.25F + 1.0F - var9), (double)((float)var3 - 0.25F + 1.0F), (double)((float)var4 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var8 * 0.6F, var10);
+			this.func_31076_a((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 - 0.25F + 1.0F - var9), (double)((float)var3 - 0.25F + 1.0F), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var8 * 0.6F, var10);
 			break;
 		case 2:
 			this.field_31085_i = 1;
 			this.field_31084_j = 2;
 			var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.25F);
 			this.renderStandardBlock(var1, var2, var3, var4);
-			this.func_31081_b((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 + 0.25F), (double)((float)var4 + 0.25F + var12), var11 * 0.6F, var13);
-			this.func_31081_b((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var4 + 0.25F), (double)((float)var4 + 0.25F + var12), var11 * 0.6F, var13);
-			this.func_31081_b((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 + 0.25F), (double)((float)var4 + 0.25F + var12), var11 * 0.5F, var13);
-			this.func_31081_b((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var4 + 0.25F), (double)((float)var4 + 0.25F + var12), var11, var13);
+			this.func_31081_b((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 + 0.25F), (double)((float)var4 + 0.25F + var9), var8 * 0.6F, var10);
+			this.func_31081_b((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var4 + 0.25F), (double)((float)var4 + 0.25F + var9), var8 * 0.6F, var10);
+			this.func_31081_b((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 + 0.25F), (double)((float)var4 + 0.25F + var9), var8 * 0.5F, var10);
+			this.func_31081_b((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var4 + 0.25F), (double)((float)var4 + 0.25F + var9), var8, var10);
 			break;
 		case 3:
 			this.field_31085_i = 2;
@@ -566,10 +768,10 @@
 			this.field_31082_l = 3;
 			var1.setBlockBounds(0.0F, 0.0F, 12.0F / 16.0F, 1.0F, 1.0F, 1.0F);
 			this.renderStandardBlock(var1, var2, var3, var4);
-			this.func_31081_b((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 - 0.25F + 1.0F - var12), (double)((float)var4 - 0.25F + 1.0F), var11 * 0.6F, var13);
-			this.func_31081_b((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var4 - 0.25F + 1.0F - var12), (double)((float)var4 - 0.25F + 1.0F), var11 * 0.6F, var13);
-			this.func_31081_b((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 - 0.25F + 1.0F - var12), (double)((float)var4 - 0.25F + 1.0F), var11 * 0.5F, var13);
-			this.func_31081_b((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var4 - 0.25F + 1.0F - var12), (double)((float)var4 - 0.25F + 1.0F), var11, var13);
+			this.func_31081_b((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 - 0.25F + 1.0F - var9), (double)((float)var4 - 0.25F + 1.0F), var8 * 0.6F, var10);
+			this.func_31081_b((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var4 - 0.25F + 1.0F - var9), (double)((float)var4 - 0.25F + 1.0F), var8 * 0.6F, var10);
+			this.func_31081_b((double)((float)var2 + 6.0F / 16.0F), (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 - 0.25F + 1.0F - var9), (double)((float)var4 - 0.25F + 1.0F), var8 * 0.5F, var10);
+			this.func_31081_b((double)((float)var2 + 10.0F / 16.0F), (double)((float)var2 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var4 - 0.25F + 1.0F - var9), (double)((float)var4 - 0.25F + 1.0F), var8, var10);
 			break;
 		case 4:
 			this.field_31087_g = 1;
@@ -578,10 +780,10 @@
 			this.field_31082_l = 1;
 			var1.setBlockBounds(0.0F, 0.0F, 0.0F, 0.25F, 1.0F, 1.0F);
 			this.renderStandardBlock(var1, var2, var3, var4);
-			this.func_31077_c((double)((float)var2 + 0.25F), (double)((float)var2 + 0.25F + var12), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var11 * 0.5F, var13);
-			this.func_31077_c((double)((float)var2 + 0.25F), (double)((float)var2 + 0.25F + var12), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var11, var13);
-			this.func_31077_c((double)((float)var2 + 0.25F), (double)((float)var2 + 0.25F + var12), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var11 * 0.6F, var13);
-			this.func_31077_c((double)((float)var2 + 0.25F), (double)((float)var2 + 0.25F + var12), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var11 * 0.6F, var13);
+			this.func_31077_c((double)((float)var2 + 0.25F), (double)((float)var2 + 0.25F + var9), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var8 * 0.5F, var10);
+			this.func_31077_c((double)((float)var2 + 0.25F), (double)((float)var2 + 0.25F + var9), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var8, var10);
+			this.func_31077_c((double)((float)var2 + 0.25F), (double)((float)var2 + 0.25F + var9), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var8 * 0.6F, var10);
+			this.func_31077_c((double)((float)var2 + 0.25F), (double)((float)var2 + 0.25F + var9), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var8 * 0.6F, var10);
 			break;
 		case 5:
 			this.field_31087_g = 2;
@@ -590,10 +792,10 @@
 			this.field_31082_l = 2;
 			var1.setBlockBounds(12.0F / 16.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 			this.renderStandardBlock(var1, var2, var3, var4);
-			this.func_31077_c((double)((float)var2 - 0.25F + 1.0F - var12), (double)((float)var2 - 0.25F + 1.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var11 * 0.5F, var13);
-			this.func_31077_c((double)((float)var2 - 0.25F + 1.0F - var12), (double)((float)var2 - 0.25F + 1.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var11, var13);
-			this.func_31077_c((double)((float)var2 - 0.25F + 1.0F - var12), (double)((float)var2 - 0.25F + 1.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var11 * 0.6F, var13);
-			this.func_31077_c((double)((float)var2 - 0.25F + 1.0F - var12), (double)((float)var2 - 0.25F + 1.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var11 * 0.6F, var13);
+			this.func_31077_c((double)((float)var2 - 0.25F + 1.0F - var9), (double)((float)var2 - 0.25F + 1.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var8 * 0.5F, var10);
+			this.func_31077_c((double)((float)var2 - 0.25F + 1.0F - var9), (double)((float)var2 - 0.25F + 1.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var8, var10);
+			this.func_31077_c((double)((float)var2 - 0.25F + 1.0F - var9), (double)((float)var2 - 0.25F + 1.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), (double)((float)var4 + 6.0F / 16.0F), var8 * 0.6F, var10);
+			this.func_31077_c((double)((float)var2 - 0.25F + 1.0F - var9), (double)((float)var2 - 0.25F + 1.0F), (double)((float)var3 + 10.0F / 16.0F), (double)((float)var3 + 6.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), (double)((float)var4 + 10.0F / 16.0F), var8 * 0.6F, var10);
 		}
 
 		this.field_31087_g = 0;
@@ -785,16 +987,16 @@
 		double var14 = (double)((float)var9 / 256.0F);
 		double var16 = (double)(((float)var9 + 15.99F) / 256.0F);
 		float var18 = 1.4F;
+		double var19;
 		double var21;
 		double var23;
 		double var25;
 		double var27;
 		double var29;
 		double var31;
-		double var33;
 		if(!this.blockAccess.isBlockNormalCube(var2, var3 - 1, var4) && !Block.fire.canBlockCatchFire(this.blockAccess, var2, var3 - 1, var4)) {
 			float var37 = 0.2F;
-			float var20 = 1.0F / 16.0F;
+			float var34 = 1.0F / 16.0F;
 			if((var2 + var3 + var4 & 1) == 1) {
 				var10 = (double)((float)var8 / 256.0F);
 				var12 = (double)(((float)var8 + 15.99F) / 256.0F);
@@ -803,63 +1005,63 @@
 			}
 
 			if((var2 / 2 + var3 / 2 + var4 / 2 & 1) == 1) {
-				var21 = var12;
+				var19 = var12;
 				var12 = var10;
-				var10 = var21;
+				var10 = var19;
 			}
 
 			if(Block.fire.canBlockCatchFire(this.blockAccess, var2 - 1, var3, var4)) {
-				var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var20), (double)(var4 + 1), var12, var14);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1), var12, var16);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-				var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var20), (double)(var4 + 0), var10, var14);
-				var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var20), (double)(var4 + 0), var10, var14);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1), var12, var16);
-				var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var20), (double)(var4 + 1), var12, var14);
+				var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var34), (double)(var4 + 1), var12, var14);
+				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var34), (double)(var4 + 1), var12, var16);
+				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var34), (double)(var4 + 0), var10, var16);
+				var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var34), (double)(var4 + 0), var10, var14);
+				var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var34), (double)(var4 + 0), var10, var14);
+				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var34), (double)(var4 + 0), var10, var16);
+				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var34), (double)(var4 + 1), var12, var16);
+				var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var34), (double)(var4 + 1), var12, var14);
 			}
 
 			if(Block.fire.canBlockCatchFire(this.blockAccess, var2 + 1, var3, var4)) {
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var20), (double)(var4 + 0), var10, var14);
-				var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-				var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1), var12, var16);
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var20), (double)(var4 + 1), var12, var14);
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var20), (double)(var4 + 1), var12, var14);
-				var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1), var12, var16);
-				var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-				var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var20), (double)(var4 + 0), var10, var14);
+				var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var34), (double)(var4 + 0), var10, var14);
+				var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var34), (double)(var4 + 0), var10, var16);
+				var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var34), (double)(var4 + 1), var12, var16);
+				var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var34), (double)(var4 + 1), var12, var14);
+				var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var34), (double)(var4 + 1), var12, var14);
+				var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var34), (double)(var4 + 1), var12, var16);
+				var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var34), (double)(var4 + 0), var10, var16);
+				var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var34), (double)(var4 + 0), var10, var14);
 			}
 
 			if(Block.fire.canBlockCatchFire(this.blockAccess, var2, var3, var4 - 1)) {
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var20), (double)((float)var4 + var37), var12, var14);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var12, var16);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var20), (double)((float)var4 + var37), var10, var14);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var20), (double)((float)var4 + var37), var10, var14);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var12, var16);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var20), (double)((float)var4 + var37), var12, var14);
+				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var34), (double)((float)var4 + var37), var12, var14);
+				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var34), (double)(var4 + 0), var12, var16);
+				var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var34), (double)(var4 + 0), var10, var16);
+				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var34), (double)((float)var4 + var37), var10, var14);
+				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var34), (double)((float)var4 + var37), var10, var14);
+				var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var34), (double)(var4 + 0), var10, var16);
+				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var34), (double)(var4 + 0), var12, var16);
+				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var34), (double)((float)var4 + var37), var12, var14);
 			}
 
 			if(Block.fire.canBlockCatchFire(this.blockAccess, var2, var3, var4 + 1)) {
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var20), (double)((float)(var4 + 1) - var37), var10, var14);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var20), (double)(var4 + 1 - 0), var10, var16);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1 - 0), var12, var16);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var20), (double)((float)(var4 + 1) - var37), var12, var14);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var20), (double)((float)(var4 + 1) - var37), var12, var14);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1 - 0), var12, var16);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var20), (double)(var4 + 1 - 0), var10, var16);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var20), (double)((float)(var4 + 1) - var37), var10, var14);
+				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var34), (double)((float)(var4 + 1) - var37), var10, var14);
+				var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var34), (double)(var4 + 1 - 0), var10, var16);
+				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var34), (double)(var4 + 1 - 0), var12, var16);
+				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var34), (double)((float)(var4 + 1) - var37), var12, var14);
+				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var34), (double)((float)(var4 + 1) - var37), var12, var14);
+				var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var34), (double)(var4 + 1 - 0), var12, var16);
+				var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var34), (double)(var4 + 1 - 0), var10, var16);
+				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var34), (double)((float)(var4 + 1) - var37), var10, var14);
 			}
 
 			if(Block.fire.canBlockCatchFire(this.blockAccess, var2, var3 + 1, var4)) {
-				var21 = (double)var2 + 0.5D + 0.5D;
-				var23 = (double)var2 + 0.5D - 0.5D;
-				var25 = (double)var4 + 0.5D + 0.5D;
-				var27 = (double)var4 + 0.5D - 0.5D;
-				var29 = (double)var2 + 0.5D - 0.5D;
-				var31 = (double)var2 + 0.5D + 0.5D;
-				var33 = (double)var4 + 0.5D - 0.5D;
+				var19 = (double)var2 + 0.5D + 0.5D;
+				var21 = (double)var2 + 0.5D - 0.5D;
+				var23 = (double)var4 + 0.5D + 0.5D;
+				var25 = (double)var4 + 0.5D - 0.5D;
+				var27 = (double)var2 + 0.5D - 0.5D;
+				var29 = (double)var2 + 0.5D + 0.5D;
+				var31 = (double)var4 + 0.5D - 0.5D;
 				double var35 = (double)var4 + 0.5D + 0.5D;
 				var10 = (double)((float)var8 / 256.0F);
 				var12 = (double)(((float)var8 + 15.99F) / 256.0F);
@@ -868,90 +1070,90 @@
 				++var3;
 				var18 = -0.2F;
 				if((var2 + var3 + var4 & 1) == 0) {
-					var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 0), var12, var14);
-					var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 0), var12, var16);
-					var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 1), var10, var16);
-					var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 1), var10, var14);
+					var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 0), var12, var14);
+					var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 0), var12, var16);
+					var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 1), var10, var16);
+					var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 1), var10, var14);
 					var10 = (double)((float)var8 / 256.0F);
 					var12 = (double)(((float)var8 + 15.99F) / 256.0F);
 					var14 = (double)((float)(var9 + 16) / 256.0F);
 					var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
-					var5.addVertexWithUV(var31, (double)((float)var3 + var18), (double)(var4 + 1), var12, var14);
-					var5.addVertexWithUV(var23, (double)(var3 + 0), (double)(var4 + 1), var12, var16);
-					var5.addVertexWithUV(var23, (double)(var3 + 0), (double)(var4 + 0), var10, var16);
-					var5.addVertexWithUV(var31, (double)((float)var3 + var18), (double)(var4 + 0), var10, var14);
+					var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 1), var12, var14);
+					var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 1), var12, var16);
+					var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 0), var10, var16);
+					var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 0), var10, var14);
 				} else {
 					var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var35, var12, var14);
-					var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var27, var12, var16);
-					var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var27, var10, var16);
+					var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var25, var12, var16);
+					var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var25, var10, var16);
 					var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var35, var10, var14);
 					var10 = (double)((float)var8 / 256.0F);
 					var12 = (double)(((float)var8 + 15.99F) / 256.0F);
 					var14 = (double)((float)(var9 + 16) / 256.0F);
 					var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
-					var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var33, var12, var14);
-					var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var25, var12, var16);
-					var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var25, var10, var16);
-					var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var33, var10, var14);
+					var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var31, var12, var14);
+					var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var23, var12, var16);
+					var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var23, var10, var16);
+					var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var31, var10, var14);
 				}
 			}
 		} else {
-			double var19 = (double)var2 + 0.5D + 0.2D;
-			var21 = (double)var2 + 0.5D - 0.2D;
-			var23 = (double)var4 + 0.5D + 0.2D;
-			var25 = (double)var4 + 0.5D - 0.2D;
-			var27 = (double)var2 + 0.5D - 0.3D;
-			var29 = (double)var2 + 0.5D + 0.3D;
-			var31 = (double)var4 + 0.5D - 0.3D;
-			var33 = (double)var4 + 0.5D + 0.3D;
-			var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 1), var12, var14);
-			var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 1), var12, var16);
-			var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 0), var10, var16);
-			var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 0), var10, var14);
-			var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 0), var12, var14);
-			var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 0), var12, var16);
-			var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 1), var10, var16);
-			var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 1), var10, var14);
+			double var33 = (double)var2 + 0.5D + 0.2D;
+			var19 = (double)var2 + 0.5D - 0.2D;
+			var21 = (double)var4 + 0.5D + 0.2D;
+			var23 = (double)var4 + 0.5D - 0.2D;
+			var25 = (double)var2 + 0.5D - 0.3D;
+			var27 = (double)var2 + 0.5D + 0.3D;
+			var29 = (double)var4 + 0.5D - 0.3D;
+			var31 = (double)var4 + 0.5D + 0.3D;
+			var5.addVertexWithUV(var25, (double)((float)var3 + var18), (double)(var4 + 1), var12, var14);
+			var5.addVertexWithUV(var33, (double)(var3 + 0), (double)(var4 + 1), var12, var16);
+			var5.addVertexWithUV(var33, (double)(var3 + 0), (double)(var4 + 0), var10, var16);
+			var5.addVertexWithUV(var25, (double)((float)var3 + var18), (double)(var4 + 0), var10, var14);
+			var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 0), var12, var14);
+			var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 0), var12, var16);
+			var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 1), var10, var16);
+			var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 1), var10, var14);
 			var10 = (double)((float)var8 / 256.0F);
 			var12 = (double)(((float)var8 + 15.99F) / 256.0F);
 			var14 = (double)((float)(var9 + 16) / 256.0F);
 			var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
-			var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var33, var12, var14);
-			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var25, var12, var16);
-			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var25, var10, var16);
-			var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var33, var10, var14);
-			var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var31, var12, var14);
-			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var23, var12, var16);
-			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var23, var10, var16);
-			var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var31, var10, var14);
-			var19 = (double)var2 + 0.5D - 0.5D;
-			var21 = (double)var2 + 0.5D + 0.5D;
-			var23 = (double)var4 + 0.5D - 0.5D;
-			var25 = (double)var4 + 0.5D + 0.5D;
-			var27 = (double)var2 + 0.5D - 0.4D;
-			var29 = (double)var2 + 0.5D + 0.4D;
-			var31 = (double)var4 + 0.5D - 0.4D;
-			var33 = (double)var4 + 0.5D + 0.4D;
-			var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 0), var10, var14);
-			var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 0), var10, var16);
-			var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 1), var12, var16);
-			var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 1), var12, var14);
-			var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 1), var10, var14);
-			var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 1), var10, var16);
-			var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 0), var12, var16);
-			var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 0), var12, var14);
+			var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var31, var12, var14);
+			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var23, var12, var16);
+			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var23, var10, var16);
+			var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var31, var10, var14);
+			var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var29, var12, var14);
+			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var21, var12, var16);
+			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var21, var10, var16);
+			var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var29, var10, var14);
+			var33 = (double)var2 + 0.5D - 0.5D;
+			var19 = (double)var2 + 0.5D + 0.5D;
+			var21 = (double)var4 + 0.5D - 0.5D;
+			var23 = (double)var4 + 0.5D + 0.5D;
+			var25 = (double)var2 + 0.5D - 0.4D;
+			var27 = (double)var2 + 0.5D + 0.4D;
+			var29 = (double)var4 + 0.5D - 0.4D;
+			var31 = (double)var4 + 0.5D + 0.4D;
+			var5.addVertexWithUV(var25, (double)((float)var3 + var18), (double)(var4 + 0), var10, var14);
+			var5.addVertexWithUV(var33, (double)(var3 + 0), (double)(var4 + 0), var10, var16);
+			var5.addVertexWithUV(var33, (double)(var3 + 0), (double)(var4 + 1), var12, var16);
+			var5.addVertexWithUV(var25, (double)((float)var3 + var18), (double)(var4 + 1), var12, var14);
+			var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 1), var10, var14);
+			var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 1), var10, var16);
+			var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 0), var12, var16);
+			var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 0), var12, var14);
 			var10 = (double)((float)var8 / 256.0F);
 			var12 = (double)(((float)var8 + 15.99F) / 256.0F);
 			var14 = (double)((float)var9 / 256.0F);
 			var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-			var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var33, var10, var14);
-			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var25, var10, var16);
-			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var25, var12, var16);
-			var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var33, var12, var14);
-			var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var31, var10, var14);
-			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var23, var10, var16);
-			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var23, var12, var16);
-			var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var31, var12, var14);
+			var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var31, var10, var14);
+			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var23, var10, var16);
+			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var23, var12, var16);
+			var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var31, var12, var14);
+			var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var29, var10, var14);
+			var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var21, var10, var16);
+			var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var21, var12, var16);
+			var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var29, var12, var14);
 		}
 
 		return true;
@@ -989,112 +1191,112 @@
 		double var17 = (double)(((float)var13 + 15.99F) / 256.0F);
 		double var19 = (double)((float)var14 / 256.0F);
 		double var21 = (double)(((float)var14 + 15.99F) / 256.0F);
-		boolean var26 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 - 1, var3, var4, 1) || !this.blockAccess.isBlockNormalCube(var2 - 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 - 1, var3 - 1, var4, -1);
-		boolean var27 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 + 1, var3, var4, 3) || !this.blockAccess.isBlockNormalCube(var2 + 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 + 1, var3 - 1, var4, -1);
-		boolean var28 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3, var4 - 1, 2) || !this.blockAccess.isBlockNormalCube(var2, var3, var4 - 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 - 1, var4 - 1, -1);
-		boolean var29 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3, var4 + 1, 0) || !this.blockAccess.isBlockNormalCube(var2, var3, var4 + 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 - 1, var4 + 1, -1);
+		boolean var23 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 - 1, var3, var4, 1) || !this.blockAccess.isBlockNormalCube(var2 - 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 - 1, var3 - 1, var4, -1);
+		boolean var24 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 + 1, var3, var4, 3) || !this.blockAccess.isBlockNormalCube(var2 + 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 + 1, var3 - 1, var4, -1);
+		boolean var25 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3, var4 - 1, 2) || !this.blockAccess.isBlockNormalCube(var2, var3, var4 - 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 - 1, var4 - 1, -1);
+		boolean var26 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3, var4 + 1, 0) || !this.blockAccess.isBlockNormalCube(var2, var3, var4 + 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 - 1, var4 + 1, -1);
 		if(!this.blockAccess.isBlockNormalCube(var2, var3 + 1, var4)) {
 			if(this.blockAccess.isBlockNormalCube(var2 - 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 - 1, var3 + 1, var4, -1)) {
-				var26 = true;
+				var23 = true;
 			}
 
 			if(this.blockAccess.isBlockNormalCube(var2 + 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 + 1, var3 + 1, var4, -1)) {
-				var27 = true;
+				var24 = true;
 			}
 
 			if(this.blockAccess.isBlockNormalCube(var2, var3, var4 - 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 + 1, var4 - 1, -1)) {
-				var28 = true;
+				var25 = true;
 			}
 
 			if(this.blockAccess.isBlockNormalCube(var2, var3, var4 + 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 + 1, var4 + 1, -1)) {
-				var29 = true;
+				var26 = true;
 			}
 		}
 
-		float var31 = (float)(var2 + 0);
-		float var32 = (float)(var2 + 1);
-		float var33 = (float)(var4 + 0);
-		float var34 = (float)(var4 + 1);
-		byte var35 = 0;
-		if((var26 || var27) && !var28 && !var29) {
-			var35 = 1;
-		}
-
-		if((var28 || var29) && !var27 && !var26) {
-			var35 = 2;
-		}
-
-		if(var35 != 0) {
+		float var27 = (float)(var2 + 0);
+		float var28 = (float)(var2 + 1);
+		float var29 = (float)(var4 + 0);
+		float var30 = (float)(var4 + 1);
+		byte var31 = 0;
+		if((var23 || var24) && !var25 && !var26) {
+			var31 = 1;
+		}
+
+		if((var25 || var26) && !var24 && !var23) {
+			var31 = 2;
+		}
+
+		if(var31 != 0) {
 			var15 = (double)((float)(var13 + 16) / 256.0F);
 			var17 = (double)(((float)(var13 + 16) + 15.99F) / 256.0F);
 			var19 = (double)((float)var14 / 256.0F);
 			var21 = (double)(((float)var14 + 15.99F) / 256.0F);
 		}
 
-		if(var35 == 0) {
-			if(var27 || var28 || var29 || var26) {
-				if(!var26) {
-					var31 += 5.0F / 16.0F;
+		if(var31 == 0) {
+			if(var24 || var25 || var26 || var23) {
+				if(!var23) {
+					var27 += 5.0F / 16.0F;
 				}
 
-				if(!var26) {
+				if(!var23) {
 					var15 += 1.25D / 64.0D;
 				}
 
-				if(!var27) {
-					var32 -= 5.0F / 16.0F;
+				if(!var24) {
+					var28 -= 5.0F / 16.0F;
 				}
 
-				if(!var27) {
+				if(!var24) {
 					var17 -= 1.25D / 64.0D;
 				}
 
-				if(!var28) {
-					var33 += 5.0F / 16.0F;
+				if(!var25) {
+					var29 += 5.0F / 16.0F;
 				}
 
-				if(!var28) {
+				if(!var25) {
 					var19 += 1.25D / 64.0D;
 				}
 
-				if(!var29) {
-					var34 -= 5.0F / 16.0F;
+				if(!var26) {
+					var30 -= 5.0F / 16.0F;
 				}
 
-				if(!var29) {
+				if(!var26) {
 					var21 -= 1.25D / 64.0D;
 				}
 			}
 
-			var5.addVertexWithUV((double)var32, (double)((float)var3 + 0.015625F), (double)var34, var17, var21);
-			var5.addVertexWithUV((double)var32, (double)((float)var3 + 0.015625F), (double)var33, var17, var19);
-			var5.addVertexWithUV((double)var31, (double)((float)var3 + 0.015625F), (double)var33, var15, var19);
-			var5.addVertexWithUV((double)var31, (double)((float)var3 + 0.015625F), (double)var34, var15, var21);
-			var5.setColorOpaque_F(var8, var8, var8);
-			var5.addVertexWithUV((double)var32, (double)((float)var3 + 0.015625F), (double)var34, var17, var21 + 1.0D / 16.0D);
-			var5.addVertexWithUV((double)var32, (double)((float)var3 + 0.015625F), (double)var33, var17, var19 + 1.0D / 16.0D);
-			var5.addVertexWithUV((double)var31, (double)((float)var3 + 0.015625F), (double)var33, var15, var19 + 1.0D / 16.0D);
-			var5.addVertexWithUV((double)var31, (double)((float)var3 + 0.015625F), (double)var34, var15, var21 + 1.0D / 16.0D);
-		} else if(var35 == 1) {
-			var5.addVertexWithUV((double)var32, (double)((float)var3 + 0.015625F), (double)var34, var17, var21);
-			var5.addVertexWithUV((double)var32, (double)((float)var3 + 0.015625F), (double)var33, var17, var19);
-			var5.addVertexWithUV((double)var31, (double)((float)var3 + 0.015625F), (double)var33, var15, var19);
-			var5.addVertexWithUV((double)var31, (double)((float)var3 + 0.015625F), (double)var34, var15, var21);
-			var5.setColorOpaque_F(var8, var8, var8);
-			var5.addVertexWithUV((double)var32, (double)((float)var3 + 0.015625F), (double)var34, var17, var21 + 1.0D / 16.0D);
-			var5.addVertexWithUV((double)var32, (double)((float)var3 + 0.015625F), (double)var33, var17, var19 + 1.0D / 16.0D);
-			var5.addVertexWithUV((double)var31, (double)((float)var3 + 0.015625F), (double)var33, var15, var19 + 1.0D / 16.0D);
-			var5.addVertexWithUV((double)var31, (double)((float)var3 + 0.015625F), (double)var34, var15, var21 + 1.0D / 16.0D);
-		} else if(var35 == 2) {
-			var5.addVertexWithUV((double)var32, (double)((float)var3 + 0.015625F), (double)var34, var17, var21);
-			var5.addVertexWithUV((double)var32, (double)((float)var3 + 0.015625F), (double)var33, var15, var21);
-			var5.addVertexWithUV((double)var31, (double)((float)var3 + 0.015625F), (double)var33, var15, var19);
-			var5.addVertexWithUV((double)var31, (double)((float)var3 + 0.015625F), (double)var34, var17, var19);
-			var5.setColorOpaque_F(var8, var8, var8);
-			var5.addVertexWithUV((double)var32, (double)((float)var3 + 0.015625F), (double)var34, var17, var21 + 1.0D / 16.0D);
-			var5.addVertexWithUV((double)var32, (double)((float)var3 + 0.015625F), (double)var33, var15, var21 + 1.0D / 16.0D);
-			var5.addVertexWithUV((double)var31, (double)((float)var3 + 0.015625F), (double)var33, var15, var19 + 1.0D / 16.0D);
-			var5.addVertexWithUV((double)var31, (double)((float)var3 + 0.015625F), (double)var34, var17, var19 + 1.0D / 16.0D);
+			var5.addVertexWithUV((double)var28, (double)((float)var3 + 0.015625F), (double)var30, var17, var21);
+			var5.addVertexWithUV((double)var28, (double)((float)var3 + 0.015625F), (double)var29, var17, var19);
+			var5.addVertexWithUV((double)var27, (double)((float)var3 + 0.015625F), (double)var29, var15, var19);
+			var5.addVertexWithUV((double)var27, (double)((float)var3 + 0.015625F), (double)var30, var15, var21);
+			var5.setColorOpaque_F(var8, var8, var8);
+			var5.addVertexWithUV((double)var28, (double)((float)var3 + 0.015625F), (double)var30, var17, var21 + 1.0D / 16.0D);
+			var5.addVertexWithUV((double)var28, (double)((float)var3 + 0.015625F), (double)var29, var17, var19 + 1.0D / 16.0D);
+			var5.addVertexWithUV((double)var27, (double)((float)var3 + 0.015625F), (double)var29, var15, var19 + 1.0D / 16.0D);
+			var5.addVertexWithUV((double)var27, (double)((float)var3 + 0.015625F), (double)var30, var15, var21 + 1.0D / 16.0D);
+		} else if(var31 == 1) {
+			var5.addVertexWithUV((double)var28, (double)((float)var3 + 0.015625F), (double)var30, var17, var21);
+			var5.addVertexWithUV((double)var28, (double)((float)var3 + 0.015625F), (double)var29, var17, var19);
+			var5.addVertexWithUV((double)var27, (double)((float)var3 + 0.015625F), (double)var29, var15, var19);
+			var5.addVertexWithUV((double)var27, (double)((float)var3 + 0.015625F), (double)var30, var15, var21);
+			var5.setColorOpaque_F(var8, var8, var8);
+			var5.addVertexWithUV((double)var28, (double)((float)var3 + 0.015625F), (double)var30, var17, var21 + 1.0D / 16.0D);
+			var5.addVertexWithUV((double)var28, (double)((float)var3 + 0.015625F), (double)var29, var17, var19 + 1.0D / 16.0D);
+			var5.addVertexWithUV((double)var27, (double)((float)var3 + 0.015625F), (double)var29, var15, var19 + 1.0D / 16.0D);
+			var5.addVertexWithUV((double)var27, (double)((float)var3 + 0.015625F), (double)var30, var15, var21 + 1.0D / 16.0D);
+		} else if(var31 == 2) {
+			var5.addVertexWithUV((double)var28, (double)((float)var3 + 0.015625F), (double)var30, var17, var21);
+			var5.addVertexWithUV((double)var28, (double)((float)var3 + 0.015625F), (double)var29, var15, var21);
+			var5.addVertexWithUV((double)var27, (double)((float)var3 + 0.015625F), (double)var29, var15, var19);
+			var5.addVertexWithUV((double)var27, (double)((float)var3 + 0.015625F), (double)var30, var17, var19);
+			var5.setColorOpaque_F(var8, var8, var8);
+			var5.addVertexWithUV((double)var28, (double)((float)var3 + 0.015625F), (double)var30, var17, var21 + 1.0D / 16.0D);
+			var5.addVertexWithUV((double)var28, (double)((float)var3 + 0.015625F), (double)var29, var15, var21 + 1.0D / 16.0D);
+			var5.addVertexWithUV((double)var27, (double)((float)var3 + 0.015625F), (double)var29, var15, var19 + 1.0D / 16.0D);
+			var5.addVertexWithUV((double)var27, (double)((float)var3 + 0.015625F), (double)var30, var17, var19 + 1.0D / 16.0D);
 		}
 
 		if(!this.blockAccess.isBlockNormalCube(var2, var3 + 1, var4)) {
@@ -1495,120 +1697,122 @@
 			float var26 = this.func_1224_a(var2 + 1, var3, var4 + 1, var22);
 			float var27 = this.func_1224_a(var2 + 1, var3, var4, var22);
 			int var28;
-			int var31;
-			float var36;
-			float var37;
-			float var38;
+			int var29;
+			float var30;
+			float var31;
+			float var32;
+			float var33;
+			int var34;
 			if(this.renderAllFaces || var10) {
 				var13 = true;
 				var28 = var1.getBlockTextureFromSideAndMetadata(1, var23);
-				float var29 = (float)BlockFluid.func_293_a(this.blockAccess, var2, var3, var4, var22);
-				if(var29 > -999.0F) {
+				var33 = (float)BlockFluid.func_293_a(this.blockAccess, var2, var3, var4, var22);
+				if(var33 > -999.0F) {
 					var28 = var1.getBlockTextureFromSideAndMetadata(2, var23);
 				}
 
-				int var30 = (var28 & 15) << 4;
-				var31 = var28 & 240;
-				double var32 = ((double)var30 + 8.0D) / 256.0D;
-				double var34 = ((double)var31 + 8.0D) / 256.0D;
-				if(var29 < -999.0F) {
-					var29 = 0.0F;
+				var34 = (var28 & 15) << 4;
+				var29 = var28 & 240;
+				double var35 = ((double)var34 + 8.0D) / 256.0D;
+				double var37 = ((double)var29 + 8.0D) / 256.0D;
+				if(var33 < -999.0F) {
+					var33 = 0.0F;
 				} else {
-					var32 = (double)((float)(var30 + 16) / 256.0F);
-					var34 = (double)((float)(var31 + 16) / 256.0F);
+					var35 = (double)((float)(var34 + 16) / 256.0F);
+					var37 = (double)((float)(var29 + 16) / 256.0F);
 				}
 
-				var36 = MathHelper.sin(var29) * 8.0F / 256.0F;
-				var37 = MathHelper.cos(var29) * 8.0F / 256.0F;
-				var38 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-				var5.setColorOpaque_F(var15 * var38 * var7, var15 * var38 * var8, var15 * var38 * var9);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var24), (double)(var4 + 0), var32 - (double)var37 - (double)var36, var34 - (double)var37 + (double)var36);
-				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var25), (double)(var4 + 1), var32 - (double)var37 + (double)var36, var34 + (double)var37 + (double)var36);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var26), (double)(var4 + 1), var32 + (double)var37 + (double)var36, var34 + (double)var37 - (double)var36);
-				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var27), (double)(var4 + 0), var32 + (double)var37 - (double)var36, var34 - (double)var37 - (double)var36);
+				var30 = MathHelper.sin(var33) * 8.0F / 256.0F;
+				var31 = MathHelper.cos(var33) * 8.0F / 256.0F;
+				var32 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
+				var5.setColorOpaque_F(var15 * var32 * var7, var15 * var32 * var8, var15 * var32 * var9);
+				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var24), (double)(var4 + 0), var35 - (double)var31 - (double)var30, var37 - (double)var31 + (double)var30);
+				var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var25), (double)(var4 + 1), var35 - (double)var31 + (double)var30, var37 + (double)var31 + (double)var30);
+				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var26), (double)(var4 + 1), var35 + (double)var31 + (double)var30, var37 + (double)var31 - (double)var30);
+				var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var27), (double)(var4 + 0), var35 + (double)var31 - (double)var30, var37 - (double)var31 - (double)var30);
 			}
 
 			if(this.renderAllFaces || var11) {
-				float var52 = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
-				var5.setColorOpaque_F(var14 * var52, var14 * var52, var14 * var52);
+				var33 = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
+				var5.setColorOpaque_F(var14 * var33, var14 * var33, var14 * var33);
 				this.renderBottomFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTextureFromSide(0));
 				var13 = true;
 			}
 
 			for(var28 = 0; var28 < 4; ++var28) {
-				int var53 = var2;
-				var31 = var4;
+				int var51 = var2;
+				var29 = var4;
 				if(var28 == 0) {
-					var31 = var4 - 1;
+					var29 = var4 - 1;
 				}
 
 				if(var28 == 1) {
-					++var31;
+					++var29;
 				}
 
 				if(var28 == 2) {
-					var53 = var2 - 1;
+					var51 = var2 - 1;
 				}
 
 				if(var28 == 3) {
-					++var53;
+					++var51;
 				}
 
-				int var54 = var1.getBlockTextureFromSideAndMetadata(var28 + 2, var23);
-				int var33 = (var54 & 15) << 4;
-				int var55 = var54 & 240;
+				var34 = var1.getBlockTextureFromSideAndMetadata(var28 + 2, var23);
+				int var52 = (var34 & 15) << 4;
+				int var36 = var34 & 240;
 				if(this.renderAllFaces || var12[var28]) {
-					float var35;
+					float var38;
 					float var39;
-					float var40;
+					float var53;
 					if(var28 == 0) {
-						var35 = var24;
-						var36 = var27;
-						var37 = (float)var2;
-						var39 = (float)(var2 + 1);
-						var38 = (float)var4;
-						var40 = (float)var4;
+						var53 = var24;
+						var30 = var27;
+						var31 = (float)var2;
+						var38 = (float)(var2 + 1);
+						var32 = (float)var4;
+						var39 = (float)var4;
 					} else if(var28 == 1) {
-						var35 = var26;
-						var36 = var25;
-						var37 = (float)(var2 + 1);
-						var39 = (float)var2;
-						var38 = (float)(var4 + 1);
-						var40 = (float)(var4 + 1);
+						var53 = var26;
+						var30 = var25;
+						var31 = (float)(var2 + 1);
+						var38 = (float)var2;
+						var32 = (float)(var4 + 1);
+						var39 = (float)(var4 + 1);
 					} else if(var28 == 2) {
-						var35 = var25;
-						var36 = var24;
-						var37 = (float)var2;
-						var39 = (float)var2;
-						var38 = (float)(var4 + 1);
-						var40 = (float)var4;
+						var53 = var25;
+						var30 = var24;
+						var31 = (float)var2;
+						var38 = (float)var2;
+						var32 = (float)(var4 + 1);
+						var39 = (float)var4;
 					} else {
-						var35 = var27;
-						var36 = var26;
-						var37 = (float)(var2 + 1);
-						var39 = (float)(var2 + 1);
-						var38 = (float)var4;
-						var40 = (float)(var4 + 1);
+						var53 = var27;
+						var30 = var26;
+						var31 = (float)(var2 + 1);
+						var38 = (float)(var2 + 1);
+						var32 = (float)var4;
+						var39 = (float)(var4 + 1);
 					}
 
 					var13 = true;
-					double var41 = (double)((float)(var33 + 0) / 256.0F);
-					double var43 = ((double)(var33 + 16) - 0.01D) / 256.0D;
-					double var45 = (double)(((float)var55 + (1.0F - var35) * 16.0F) / 256.0F);
-					double var47 = (double)(((float)var55 + (1.0F - var36) * 16.0F) / 256.0F);
-					double var49 = ((double)(var55 + 16) - 0.01D) / 256.0D;
-					float var51 = var1.getBlockBrightness(this.blockAccess, var53, var3, var31);
+					double var40 = (double)((float)(var52 + 0) / 256.0F);
+					double var42 = ((double)(var52 + 16) - 0.01D) / 256.0D;
+					double var44 = (double)(((float)var36 + (1.0F - var53) * 16.0F) / 256.0F);
+					double var46 = (double)(((float)var36 + (1.0F - var30) * 16.0F) / 256.0F);
+					double var48 = ((double)(var36 + 16) - 0.01D) / 256.0D;
+					float var50 = var1.getBlockBrightness(this.blockAccess, var51, var3, var29);
 					if(var28 < 2) {
-						var51 *= var16;
+						var50 *= var16;
 					} else {
-						var51 *= var17;
+						var50 *= var17;
 					}
 
-					var5.setColorOpaque_F(var15 * var51 * var7, var15 * var51 * var8, var15 * var51 * var9);
-					var5.addVertexWithUV((double)var37, (double)((float)var3 + var35), (double)var38, var41, var45);
-					var5.addVertexWithUV((double)var39, (double)((float)var3 + var36), (double)var40, var43, var47);
-					var5.addVertexWithUV((double)var39, (double)(var3 + 0), (double)var40, var43, var49);
-					var5.addVertexWithUV((double)var37, (double)(var3 + 0), (double)var38, var41, var49);
+					var5.setColorOpaque_F(var15 * var50 * var7, var15 * var50 * var8, var15 * var50 * var9);
+					var5.addVertexWithUV((double)var31, (double)((float)var3 + var53), (double)var32, var40, var44);
+					var5.addVertexWithUV((double)var38, (double)((float)var3 + var30), (double)var39, var42, var46);
+					var5.addVertexWithUV((double)var38, (double)(var3 + 0), (double)var39, var42, var48);
+					var5.addVertexWithUV((double)var31, (double)(var3 + 0), (double)var32, var40, var48);
 				}
 			}
 
@@ -1624,25 +1828,25 @@
 
 		for(int var7 = 0; var7 < 4; ++var7) {
 			int var8 = var1 - (var7 & 1);
-			int var10 = var3 - (var7 >> 1 & 1);
-			if(this.blockAccess.getBlockMaterial(var8, var2 + 1, var10) == var4) {
+			int var9 = var3 - (var7 >> 1 & 1);
+			if(this.blockAccess.getBlockMaterial(var8, var2 + 1, var9) == var4) {
 				return 1.0F;
 			}
 
-			Material var11 = this.blockAccess.getBlockMaterial(var8, var2, var10);
-			if(var11 != var4) {
-				if(!var11.isSolid()) {
+			Material var10 = this.blockAccess.getBlockMaterial(var8, var2, var9);
+			if(var10 != var4) {
+				if(!var10.isSolid()) {
 					++var6;
 					++var5;
 				}
 			} else {
-				int var12 = this.blockAccess.getBlockMetadata(var8, var2, var10);
-				if(var12 >= 8 || var12 == 0) {
-					var6 += BlockFluid.getPercentAir(var12) * 10.0F;
+				int var11 = this.blockAccess.getBlockMetadata(var8, var2, var9);
+				if(var11 >= 8 || var11 == 0) {
+					var6 += BlockFluid.getPercentAir(var11) * 10.0F;
 					var5 += 10;
 				}
 
-				var6 += BlockFluid.getPercentAir(var12);
+				var6 += BlockFluid.getPercentAir(var11);
 				++var5;
 			}
 		}
@@ -1754,26 +1958,26 @@
 		this.field_22361_ab = Block.canBlockGrass[this.blockAccess.getBlockId(var2, var3 - 1, var4 - 1)];
 		if(var1.blockIndexInTexture == 3) {
 			var18 = false;
-			var17 = var18;
-			var16 = var18;
-			var15 = var18;
-			var13 = var18;
+			var17 = false;
+			var16 = false;
+			var15 = false;
+			var13 = false;
 		}
 
 		if(this.overrideBlockTexture >= 0) {
 			var18 = false;
-			var17 = var18;
-			var16 = var18;
-			var15 = var18;
-			var13 = var18;
+			var17 = false;
+			var16 = false;
+			var15 = false;
+			var13 = false;
 		}
 
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 - 1, var4, 0)) {
 			if(this.field_22352_G <= 0) {
 				var12 = this.aoLightValueYNeg;
-				var11 = var12;
-				var10 = var12;
-				var9 = var12;
+				var11 = this.aoLightValueYNeg;
+				var10 = this.aoLightValueYNeg;
+				var9 = this.aoLightValueYNeg;
 			} else {
 				--var3;
 				this.field_22376_n = var1.getBlockBrightness(this.blockAccess, var2 - 1, var3, var4);
@@ -1833,9 +2037,9 @@
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 + 1, var4, 1)) {
 			if(this.field_22352_G <= 0) {
 				var12 = this.aoLightValueYPos;
-				var11 = var12;
-				var10 = var12;
-				var9 = var12;
+				var11 = this.aoLightValueYPos;
+				var10 = this.aoLightValueYPos;
+				var9 = this.aoLightValueYPos;
 			} else {
 				++var3;
 				this.field_22368_v = var1.getBlockBrightness(this.blockAccess, var2 - 1, var3, var4);
@@ -1896,9 +2100,9 @@
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 - 1, 2)) {
 			if(this.field_22352_G <= 0) {
 				var12 = this.aoLightValueZNeg;
-				var11 = var12;
-				var10 = var12;
-				var9 = var12;
+				var11 = this.aoLightValueZNeg;
+				var10 = this.aoLightValueZNeg;
+				var9 = this.aoLightValueZNeg;
 			} else {
 				--var4;
 				this.field_22358_C = var1.getBlockBrightness(this.blockAccess, var2 - 1, var3, var4);
@@ -1975,9 +2179,9 @@
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 + 1, 3)) {
 			if(this.field_22352_G <= 0) {
 				var12 = this.aoLightValueZPos;
-				var11 = var12;
-				var10 = var12;
-				var9 = var12;
+				var11 = this.aoLightValueZPos;
+				var10 = this.aoLightValueZPos;
+				var9 = this.aoLightValueZPos;
 			} else {
 				++var4;
 				this.field_22354_E = var1.getBlockBrightness(this.blockAccess, var2 - 1, var3, var4);
@@ -2054,9 +2258,9 @@
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 - 1, var3, var4, 4)) {
 			if(this.field_22352_G <= 0) {
 				var12 = this.aoLightValueXNeg;
-				var11 = var12;
-				var10 = var12;
-				var9 = var12;
+				var11 = this.aoLightValueXNeg;
+				var10 = this.aoLightValueXNeg;
+				var9 = this.aoLightValueXNeg;
 			} else {
 				--var2;
 				this.field_22376_n = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
@@ -2133,9 +2337,9 @@
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 + 1, var3, var4, 5)) {
 			if(this.field_22352_G <= 0) {
 				var12 = this.aoLightValueXPos;
-				var11 = var12;
-				var10 = var12;
-				var9 = var12;
+				var11 = this.aoLightValueXPos;
+				var10 = this.aoLightValueXPos;
+				var9 = this.aoLightValueXPos;
 			} else {
 				++var2;
 				this.field_22371_s = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
@@ -2449,69 +2653,6 @@
 		return var9;
 	}
 
-	public boolean renderBlockFence(Block var1, int var2, int var3, int var4) {
-		boolean var5 = false;
-		float var6 = 6.0F / 16.0F;
-		float var7 = 10.0F / 16.0F;
-		var1.setBlockBounds(var6, 0.0F, var6, var7, 1.0F, var7);
-		this.renderStandardBlock(var1, var2, var3, var4);
-		var5 = true;
-		boolean var8 = false;
-		boolean var9 = false;
-		if(this.blockAccess.getBlockId(var2 - 1, var3, var4) == var1.blockID || this.blockAccess.getBlockId(var2 + 1, var3, var4) == var1.blockID) {
-			var8 = true;
-		}
-
-		if(this.blockAccess.getBlockId(var2, var3, var4 - 1) == var1.blockID || this.blockAccess.getBlockId(var2, var3, var4 + 1) == var1.blockID) {
-			var9 = true;
-		}
-
-		boolean var10 = this.blockAccess.getBlockId(var2 - 1, var3, var4) == var1.blockID;
-		boolean var11 = this.blockAccess.getBlockId(var2 + 1, var3, var4) == var1.blockID;
-		boolean var12 = this.blockAccess.getBlockId(var2, var3, var4 - 1) == var1.blockID;
-		boolean var13 = this.blockAccess.getBlockId(var2, var3, var4 + 1) == var1.blockID;
-		if(!var8 && !var9) {
-			var8 = true;
-		}
-
-		var6 = 7.0F / 16.0F;
-		var7 = 9.0F / 16.0F;
-		float var14 = 12.0F / 16.0F;
-		float var15 = 15.0F / 16.0F;
-		float var16 = var10 ? 0.0F : var6;
-		float var17 = var11 ? 1.0F : var7;
-		float var18 = var12 ? 0.0F : var6;
-		float var19 = var13 ? 1.0F : var7;
-		if(var8) {
-			var1.setBlockBounds(var16, var14, var6, var17, var15, var7);
-			this.renderStandardBlock(var1, var2, var3, var4);
-			var5 = true;
-		}
-
-		if(var9) {
-			var1.setBlockBounds(var6, var14, var18, var7, var15, var19);
-			this.renderStandardBlock(var1, var2, var3, var4);
-			var5 = true;
-		}
-
-		var14 = 6.0F / 16.0F;
-		var15 = 9.0F / 16.0F;
-		if(var8) {
-			var1.setBlockBounds(var16, var14, var6, var17, var15, var7);
-			this.renderStandardBlock(var1, var2, var3, var4);
-			var5 = true;
-		}
-
-		if(var9) {
-			var1.setBlockBounds(var6, var14, var18, var7, var15, var19);
-			this.renderStandardBlock(var1, var2, var3, var4);
-			var5 = true;
-		}
-
-		var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-		return var5;
-	}
-
 	public boolean renderBlockStairs(Block var1, int var2, int var3, int var4) {
 		boolean var5 = false;
 		int var6 = this.blockAccess.getBlockMetadata(var2, var3, var4);
@@ -3283,7 +3424,9 @@
 						var4.draw();
 						GL11.glTranslatef(0.5F, 0.5F, 0.5F);
 					}
-				} else if(var5 == 11) {
+				}
+
+				if(var5 == 11) {
 					for(var9 = 0; var9 < 4; ++var9) {
 						var7 = 2.0F / 16.0F;
 						if(var9 == 0) {
@@ -3332,6 +3475,49 @@
 					}
 
 					var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+				} else if(var5 == 21) {
+					for(var9 = 0; var9 < 3; ++var9) {
+						var7 = 1.0F / 16.0F;
+						if(var9 == 0) {
+							var1.setBlockBounds(0.5F - var7, 0.3F, 0.0F, 0.5F + var7, 1.0F, var7 * 2.0F);
+						}
+
+						if(var9 == 1) {
+							var1.setBlockBounds(0.5F - var7, 0.3F, 1.0F - var7 * 2.0F, 0.5F + var7, 1.0F, 1.0F);
+						}
+
+						var7 = 1.0F / 16.0F;
+						if(var9 == 2) {
+							var1.setBlockBounds(0.5F - var7, 0.5F, 0.0F, 0.5F + var7, 1.0F - var7, 1.0F);
+						}
+
+						GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
+						var4.startDrawingQuads();
+						var4.setNormal(0.0F, -1.0F, 0.0F);
+						this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
+						var4.draw();
+						var4.startDrawingQuads();
+						var4.setNormal(0.0F, 1.0F, 0.0F);
+						this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
+						var4.draw();
+						var4.startDrawingQuads();
+						var4.setNormal(0.0F, 0.0F, -1.0F);
+						this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
+						var4.draw();
+						var4.startDrawingQuads();
+						var4.setNormal(0.0F, 0.0F, 1.0F);
+						this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
+						var4.draw();
+						var4.startDrawingQuads();
+						var4.setNormal(-1.0F, 0.0F, 0.0F);
+						this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
+						var4.draw();
+						var4.startDrawingQuads();
+						var4.setNormal(1.0F, 0.0F, 0.0F);
+						this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
+						var4.draw();
+						GL11.glTranslatef(0.5F, 0.5F, 0.5F);
+					}
 				}
 			}
 		} else {
@@ -3371,6 +3557,6 @@
 	}
 
 	public static boolean renderItemIn3d(int var0) {
-		return var0 == 0 ? true : (var0 == 13 ? true : (var0 == 10 ? true : (var0 == 11 ? true : var0 == 16)));
+		return var0 == 0 ? true : (var0 == 13 ? true : (var0 == 10 ? true : (var0 == 11 ? true : (var0 == 21 ? true : var0 == 16))));
 	}
 }
--- net/minecraft/src/World.java
+++ net/minecraft/src/World.java
@@ -288,6 +288,7 @@
 
 			this.chunkProvider.saveChunks(var1, var2);
 		}
+
 	}
 
 	private void saveLevel() {
@@ -510,8 +511,8 @@
 			if(var5 != null) {
 				var5.onNeighborBlockChange(this, var1, var2, var3, var4);
 			}
-
 		}
+
 	}
 
 	public boolean canBlockSeeTheSky(int var1, int var2, int var3) {
@@ -538,7 +539,7 @@
 		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
 			if(var4) {
 				int var5 = this.getBlockId(var1, var2, var3);
-				if(var5 == Block.stairSingle.blockID || var5 == Block.tilledField.blockID || var5 == Block.stairCompactCobblestone.blockID || var5 == Block.stairCompactPlanks.blockID) {
+				if(var5 == Block.stairSingle.blockID || var5 == Block.tilledField.blockID || var5 == Block.stairCompactCobblestone.blockID || var5 == Block.stairCompactPlanks.blockID || var5 == Block.stairCompactBrick.blockID || var5 == Block.stairCompactSandstone.blockID) {
 					int var6 = this.getBlockLightValue_do(var1, var2 + 1, var3, false);
 					int var7 = this.getBlockLightValue_do(var1 + 1, var2, var3, false);
 					int var8 = this.getBlockLightValue_do(var1 - 1, var2, var3, false);
@@ -614,25 +615,23 @@
 	}
 
 	public void neighborLightPropagationChanged(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
-		if(!this.worldProvider.hasNoSky || var1 != EnumSkyBlock.Sky) {
-			if(this.blockExists(var2, var3, var4)) {
-				if(var1 == EnumSkyBlock.Sky) {
-					if(this.canExistingBlockSeeTheSky(var2, var3, var4)) {
-						var5 = 15;
-					}
-				} else if(var1 == EnumSkyBlock.Block) {
-					int var6 = this.getBlockId(var2, var3, var4);
-					if(Block.lightValue[var6] > var5) {
-						var5 = Block.lightValue[var6];
-					}
-				}
-
-				if(this.getSavedLightValue(var1, var2, var3, var4) != var5) {
-					this.scheduleLightingUpdate(var1, var2, var3, var4, var2, var3, var4);
-				}
-
+		if((!this.worldProvider.hasNoSky || var1 != EnumSkyBlock.Sky) && this.blockExists(var2, var3, var4)) {
+			if(var1 == EnumSkyBlock.Sky) {
+				if(this.canExistingBlockSeeTheSky(var2, var3, var4)) {
+					var5 = 15;
+				}
+			} else if(var1 == EnumSkyBlock.Block) {
+				int var6 = this.getBlockId(var2, var3, var4);
+				if(Block.lightValue[var6] > var5) {
+					var5 = Block.lightValue[var6];
+				}
+			}
+
+			if(this.getSavedLightValue(var1, var2, var3, var4) != var5) {
+				this.scheduleLightingUpdate(var1, var2, var3, var4, var2, var3, var4);
 			}
 		}
+
 	}
 
 	public int getSavedLightValue(EnumSkyBlock var1, int var2, int var3, int var4) {
@@ -659,21 +658,15 @@
 	}
 
 	public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
-		if(var2 >= -32000000 && var4 >= -32000000 && var2 < 32000000 && var4 <= 32000000) {
-			if(var3 >= 0) {
-				if(var3 < 128) {
-					if(this.chunkExists(var2 >> 4, var4 >> 4)) {
-						Chunk var6 = this.getChunkFromChunkCoords(var2 >> 4, var4 >> 4);
-						var6.setLightValue(var1, var2 & 15, var3, var4 & 15, var5);
-
-						for(int var7 = 0; var7 < this.worldAccesses.size(); ++var7) {
-							((IWorldAccess)this.worldAccesses.get(var7)).markBlockAndNeighborsNeedsUpdate(var2, var3, var4);
-						}
-
-					}
-				}
+		if(var2 >= -32000000 && var4 >= -32000000 && var2 < 32000000 && var4 <= 32000000 && var3 >= 0 && var3 < 128 && this.chunkExists(var2 >> 4, var4 >> 4)) {
+			Chunk var6 = this.getChunkFromChunkCoords(var2 >> 4, var4 >> 4);
+			var6.setLightValue(var1, var2 & 15, var3, var4 & 15, var5);
+
+			for(int var7 = 0; var7 < this.worldAccesses.size(); ++var7) {
+				((IWorldAccess)this.worldAccesses.get(var7)).markBlockAndNeighborsNeedsUpdate(var2, var3, var4);
 			}
 		}
+
 	}
 
 	public float getBrightness(int var1, int var2, int var3, int var4) {
@@ -731,114 +724,114 @@
 						return null;
 					}
 
-					boolean var39 = true;
-					boolean var40 = true;
-					boolean var41 = true;
-					double var15 = 999.0D;
+					boolean var42 = true;
+					boolean var15 = true;
+					boolean var16 = true;
 					double var17 = 999.0D;
 					double var19 = 999.0D;
+					double var21 = 999.0D;
 					if(var5 > var8) {
-						var15 = (double)var8 + 1.0D;
+						var17 = (double)var8 + 1.0D;
 					} else if(var5 < var8) {
-						var15 = (double)var8 + 0.0D;
+						var17 = (double)var8 + 0.0D;
 					} else {
-						var39 = false;
+						var42 = false;
 					}
 
 					if(var6 > var9) {
-						var17 = (double)var9 + 1.0D;
+						var19 = (double)var9 + 1.0D;
 					} else if(var6 < var9) {
-						var17 = (double)var9 + 0.0D;
+						var19 = (double)var9 + 0.0D;
 					} else {
-						var40 = false;
+						var15 = false;
 					}
 
 					if(var7 > var10) {
-						var19 = (double)var10 + 1.0D;
+						var21 = (double)var10 + 1.0D;
 					} else if(var7 < var10) {
-						var19 = (double)var10 + 0.0D;
+						var21 = (double)var10 + 0.0D;
 					} else {
-						var41 = false;
+						var16 = false;
 					}
 
-					double var21 = 999.0D;
 					double var23 = 999.0D;
 					double var25 = 999.0D;
-					double var27 = var2.xCoord - var1.xCoord;
-					double var29 = var2.yCoord - var1.yCoord;
-					double var31 = var2.zCoord - var1.zCoord;
-					if(var39) {
-						var21 = (var15 - var1.xCoord) / var27;
-					}
-
-					if(var40) {
-						var23 = (var17 - var1.yCoord) / var29;
-					}
-
-					if(var41) {
-						var25 = (var19 - var1.zCoord) / var31;
-					}
-
-					boolean var33 = false;
-					byte var42;
-					if(var21 < var23 && var21 < var25) {
+					double var27 = 999.0D;
+					double var29 = var2.xCoord - var1.xCoord;
+					double var31 = var2.yCoord - var1.yCoord;
+					double var33 = var2.zCoord - var1.zCoord;
+					if(var42) {
+						var23 = (var17 - var1.xCoord) / var29;
+					}
+
+					if(var15) {
+						var25 = (var19 - var1.yCoord) / var31;
+					}
+
+					if(var16) {
+						var27 = (var21 - var1.zCoord) / var33;
+					}
+
+					boolean var35 = false;
+					byte var36;
+					if(var23 < var25 && var23 < var27) {
 						if(var5 > var8) {
-							var42 = 4;
+							var36 = 4;
 						} else {
-							var42 = 5;
+							var36 = 5;
 						}
 
-						var1.xCoord = var15;
-						var1.yCoord += var29 * var21;
-						var1.zCoord += var31 * var21;
-					} else if(var23 < var25) {
+						var1.xCoord = var17;
+						var1.yCoord += var31 * var23;
+						var1.zCoord += var33 * var23;
+					} else if(var25 < var27) {
 						if(var6 > var9) {
-							var42 = 0;
+							var36 = 0;
 						} else {
-							var42 = 1;
+							var36 = 1;
 						}
 
-						var1.xCoord += var27 * var23;
-						var1.yCoord = var17;
-						var1.zCoord += var31 * var23;
+						var1.xCoord += var29 * var25;
+						var1.yCoord = var19;
+						var1.zCoord += var33 * var25;
 					} else {
 						if(var7 > var10) {
-							var42 = 2;
+							var36 = 2;
 						} else {
-							var42 = 3;
+							var36 = 3;
 						}
 
-						var1.xCoord += var27 * var25;
-						var1.yCoord += var29 * var25;
-						var1.zCoord = var19;
+						var1.xCoord += var29 * var27;
+						var1.yCoord += var31 * var27;
+						var1.zCoord = var21;
 					}
 
-					Vec3D var34 = Vec3D.createVector(var1.xCoord, var1.yCoord, var1.zCoord);
-					var8 = (int)(var34.xCoord = (double)MathHelper.floor_double(var1.xCoord));
-					if(var42 == 5) {
+					Vec3D var37 = Vec3D.createVector(var1.xCoord, var1.yCoord, var1.zCoord);
+					var8 = (int)(var37.xCoord = (double)MathHelper.floor_double(var1.xCoord));
+					if(var36 == 5) {
 						--var8;
-						++var34.xCoord;
+						++var37.xCoord;
 					}
 
-					var9 = (int)(var34.yCoord = (double)MathHelper.floor_double(var1.yCoord));
-					if(var42 == 1) {
+					var9 = (int)(var37.yCoord = (double)MathHelper.floor_double(var1.yCoord));
+					if(var36 == 1) {
 						--var9;
-						++var34.yCoord;
+						++var37.yCoord;
 					}
 
-					var10 = (int)(var34.zCoord = (double)MathHelper.floor_double(var1.zCoord));
-					if(var42 == 3) {
+					var10 = (int)(var37.zCoord = (double)MathHelper.floor_double(var1.zCoord));
+					if(var36 == 3) {
 						--var10;
-						++var34.zCoord;
+						++var37.zCoord;
 					}
 
-					int var35 = this.getBlockId(var8, var9, var10);
-					int var36 = this.getBlockMetadata(var8, var9, var10);
-					Block var37 = Block.blocksList[var35];
-					if((!var4 || var37 == null || var37.getCollisionBoundingBoxFromPool(this, var8, var9, var10) != null) && var35 > 0 && var37.canCollideCheck(var36, var3)) {
-						MovingObjectPosition var38 = var37.collisionRayTrace(this, var8, var9, var10, var1, var2);
-						if(var38 != null) {
-							return var38;
+					int var38 = this.getBlockId(var8, var9, var10);
+					int var39 = this.getBlockMetadata(var8, var9, var10);
+					Block var40 = Block.blocksList[var38];
+					if((!var4 || var40 == null || var40.getCollisionBoundingBoxFromPool(this, var8, var9, var10) != null) && var38 > 0 && var40.canCollideCheck(var39, var3)) {
+						MovingObjectPosition var41 = var40.collisionRayTrace(this, var8, var9, var10, var1, var2);
+						if(var41 != null) {
+							return var41;
 						}
 					}
 				}
@@ -1151,20 +1144,17 @@
 					Block.blocksList[var8].updateTick(this, var6.xCoord, var6.yCoord, var6.zCoord, this.rand);
 				}
 			}
-
-		} else {
-			if(this.checkChunksExist(var1 - var7, var2 - var7, var3 - var7, var1 + var7, var2 + var7, var3 + var7)) {
-				if(var4 > 0) {
-					var6.setScheduledTime((long)var5 + this.worldInfo.getWorldTime());
-				}
-
-				if(!this.scheduledTickSet.contains(var6)) {
-					this.scheduledTickSet.add(var6);
-					this.scheduledTickTreeSet.add(var6);
-				}
-			}
-
+		} else if(this.checkChunksExist(var1 - var7, var2 - var7, var3 - var7, var1 + var7, var2 + var7, var3 + var7)) {
+			if(var4 > 0) {
+				var6.setScheduledTime((long)var5 + this.worldInfo.getWorldTime());
+			}
+
+			if(!this.scheduledTickSet.contains(var6)) {
+				this.scheduledTickSet.add(var6);
+				this.scheduledTickTreeSet.add(var6);
+			}
 		}
+
 	}
 
 	public void updateEntities() {
@@ -1225,40 +1215,40 @@
 		}
 
 		this.field_31055_L = true;
-		Iterator var10 = this.loadedTileEntityList.iterator();
+		Iterator var5 = this.loadedTileEntityList.iterator();
 
-		while(var10.hasNext()) {
-			TileEntity var5 = (TileEntity)var10.next();
-			if(!var5.func_31006_g()) {
-				var5.updateEntity();
+		while(var5.hasNext()) {
+			TileEntity var6 = (TileEntity)var5.next();
+			if(!var6.func_31006_g()) {
+				var6.updateEntity();
 			}
 
-			if(var5.func_31006_g()) {
-				var10.remove();
-				Chunk var7 = this.getChunkFromChunkCoords(var5.xCoord >> 4, var5.zCoord >> 4);
+			if(var6.func_31006_g()) {
+				var5.remove();
+				Chunk var7 = this.getChunkFromChunkCoords(var6.xCoord >> 4, var6.zCoord >> 4);
 				if(var7 != null) {
-					var7.removeChunkBlockTileEntity(var5.xCoord & 15, var5.yCoord, var5.zCoord & 15);
+					var7.removeChunkBlockTileEntity(var6.xCoord & 15, var6.yCoord, var6.zCoord & 15);
 				}
 			}
 		}
 
 		this.field_31055_L = false;
 		if(!this.field_30900_E.isEmpty()) {
-			Iterator var6 = this.field_30900_E.iterator();
-
-			while(var6.hasNext()) {
-				TileEntity var8 = (TileEntity)var6.next();
-				if(!var8.func_31006_g()) {
-					if(!this.loadedTileEntityList.contains(var8)) {
-						this.loadedTileEntityList.add(var8);
-					}
-
-					Chunk var9 = this.getChunkFromChunkCoords(var8.xCoord >> 4, var8.zCoord >> 4);
-					if(var9 != null) {
-						var9.setChunkBlockTileEntity(var8.xCoord & 15, var8.yCoord, var8.zCoord & 15, var8);
-					}
-
-					this.markBlockNeedsUpdate(var8.xCoord, var8.yCoord, var8.zCoord);
+			Iterator var9 = this.field_30900_E.iterator();
+
+			while(var9.hasNext()) {
+				TileEntity var10 = (TileEntity)var9.next();
+				if(!var10.func_31006_g()) {
+					if(!this.loadedTileEntityList.contains(var10)) {
+						this.loadedTileEntityList.add(var10);
+					}
+
+					Chunk var8 = this.getChunkFromChunkCoords(var10.xCoord >> 4, var10.zCoord >> 4);
+					if(var8 != null) {
+						var8.setChunkBlockTileEntity(var10.xCoord & 15, var10.yCoord, var10.zCoord & 15, var10);
+					}
+
+					this.markBlockNeedsUpdate(var10.xCoord, var10.yCoord, var10.zCoord);
 				}
 			}
 
@@ -1342,8 +1332,8 @@
 					var1.riddenByEntity = null;
 				}
 			}
-
 		}
+
 	}
 
 	public boolean checkIfAABBIsClear(AxisAlignedBB var1) {
@@ -1648,6 +1638,7 @@
 		} else {
 			++this.lightingUpdatesCounter;
 
+			boolean var3;
 			try {
 				int var1 = 500;
 
@@ -1656,17 +1647,20 @@
 					--var1;
 					if(var1 <= 0) {
 						var2 = true;
-						return var2;
+						var3 = var2;
+						return var3;
 					}
 
 					((MetadataChunkBlock)this.lightingToUpdate.remove(this.lightingToUpdate.size() - 1)).func_4127_a(this);
 				}
 
 				var2 = false;
-				return var2;
+				var3 = var2;
 			} finally {
 				--this.lightingUpdatesCounter;
 			}
+
+			return var3;
 		}
 	}
 
@@ -1689,31 +1683,31 @@
 					return;
 				}
 
-				if(!this.getChunkFromBlockCoords(var9, var10).func_21167_h()) {
-					int var11 = this.lightingToUpdate.size();
-					int var12;
-					if(var8) {
-						var12 = 5;
-						if(var12 > var11) {
-							var12 = var11;
-						}
-
-						for(int var13 = 0; var13 < var12; ++var13) {
-							MetadataChunkBlock var14 = (MetadataChunkBlock)this.lightingToUpdate.get(this.lightingToUpdate.size() - var13 - 1);
-							if(var14.field_1299_a == var1 && var14.func_866_a(var2, var3, var4, var5, var6, var7)) {
-								return;
-							}
-						}
-					}
-
-					this.lightingToUpdate.add(new MetadataChunkBlock(var1, var2, var3, var4, var5, var6, var7));
-					var12 = 1000000;
-					if(this.lightingToUpdate.size() > 1000000) {
-						System.out.println("More than " + var12 + " updates, aborting lighting updates");
-						this.lightingToUpdate.clear();
-					}
-
+				if(this.getChunkFromBlockCoords(var9, var10).func_21167_h()) {
 					return;
+				}
+
+				int var11 = this.lightingToUpdate.size();
+				int var12;
+				if(var8) {
+					var12 = 5;
+					if(var12 > var11) {
+						var12 = var11;
+					}
+
+					for(int var13 = 0; var13 < var12; ++var13) {
+						MetadataChunkBlock var14 = (MetadataChunkBlock)this.lightingToUpdate.get(this.lightingToUpdate.size() - var13 - 1);
+						if(var14.field_1299_a == var1 && var14.func_866_a(var2, var3, var4, var5, var6, var7)) {
+							return;
+						}
+					}
+				}
+
+				this.lightingToUpdate.add(new MetadataChunkBlock(var1, var2, var3, var4, var5, var6, var7));
+				var12 = 1000000;
+				if(this.lightingToUpdate.size() > 1000000) {
+					System.out.println("More than " + var12 + " updates, aborting lighting updates");
+					this.lightingToUpdate.clear();
 				}
 			} finally {
 				--lightingUpdatesScheduled;
@@ -1737,37 +1731,37 @@
 
 	public void tick() {
 		this.updateWeather();
-		long var2;
+		long var1;
 		if(this.isAllPlayersFullyAsleep()) {
-			boolean var1 = false;
+			boolean var3 = false;
 			if(this.spawnHostileMobs && this.difficultySetting >= 1) {
-				var1 = SpawnerAnimals.performSleepSpawning(this, this.playerEntities);
+				var3 = SpawnerAnimals.performSleepSpawning(this, this.playerEntities);
 			}
 
-			if(!var1) {
-				var2 = this.worldInfo.getWorldTime() + 24000L;
-				this.worldInfo.setWorldTime(var2 - var2 % 24000L);
+			if(!var3) {
+				var1 = this.worldInfo.getWorldTime() + 24000L;
+				this.worldInfo.setWorldTime(var1 - var1 % 24000L);
 				this.wakeUpAllPlayers();
 			}
 		}
 
 		SpawnerAnimals.performSpawning(this, this.spawnHostileMobs, this.spawnPeacefulMobs);
 		this.chunkProvider.unload100OldestChunks();
-		int var4 = this.calculateSkylightSubtracted(1.0F);
-		if(var4 != this.skylightSubtracted) {
-			this.skylightSubtracted = var4;
+		int var5 = this.calculateSkylightSubtracted(1.0F);
+		if(var5 != this.skylightSubtracted) {
+			this.skylightSubtracted = var5;
 
-			for(int var5 = 0; var5 < this.worldAccesses.size(); ++var5) {
-				((IWorldAccess)this.worldAccesses.get(var5)).updateAllRenderers();
+			for(int var4 = 0; var4 < this.worldAccesses.size(); ++var4) {
+				((IWorldAccess)this.worldAccesses.get(var4)).updateAllRenderers();
 			}
 		}
 
-		var2 = this.worldInfo.getWorldTime() + 1L;
-		if(var2 % (long)this.autosavePeriod == 0L) {
+		var1 = this.worldInfo.getWorldTime() + 1L;
+		if(var1 % (long)this.autosavePeriod == 0L) {
 			this.saveWorld(false, (IProgressUpdate)null);
 		}
 
-		this.worldInfo.setWorldTime(var2);
+		this.worldInfo.setWorldTime(var1);
 		this.TickUpdates(false);
 		this.updateBlocksAndPlayCaveSounds();
 	}
@@ -1847,8 +1841,8 @@
 			if(this.thunderingStrength > 1.0F) {
 				this.thunderingStrength = 1.0F;
 			}
-
 		}
+
 	}
 
 	private void stopPrecipitation() {
@@ -1861,19 +1855,19 @@
 	protected void updateBlocksAndPlayCaveSounds() {
 		this.positionsToUpdate.clear();
 
+		int var1;
+		int var2;
 		int var3;
 		int var4;
-		int var6;
-		int var7;
-		for(int var1 = 0; var1 < this.playerEntities.size(); ++var1) {
-			EntityPlayer var2 = (EntityPlayer)this.playerEntities.get(var1);
-			var3 = MathHelper.floor_double(var2.posX / 16.0D);
-			var4 = MathHelper.floor_double(var2.posZ / 16.0D);
-			byte var5 = 9;
+		for(int var5 = 0; var5 < this.playerEntities.size(); ++var5) {
+			EntityPlayer var6 = (EntityPlayer)this.playerEntities.get(var5);
+			var1 = MathHelper.floor_double(var6.posX / 16.0D);
+			var2 = MathHelper.floor_double(var6.posZ / 16.0D);
+			byte var7 = 9;
 
-			for(var6 = -var5; var6 <= var5; ++var6) {
-				for(var7 = -var5; var7 <= var5; ++var7) {
-					this.positionsToUpdate.add(new ChunkCoordIntPair(var6 + var3, var7 + var4));
+			for(var3 = -var7; var3 <= var7; ++var3) {
+				for(var4 = -var7; var4 <= var7; ++var4) {
+					this.positionsToUpdate.add(new ChunkCoordIntPair(var3 + var1, var4 + var2));
 				}
 			}
 		}
@@ -1886,25 +1880,25 @@
 
 		while(var12.hasNext()) {
 			ChunkCoordIntPair var13 = (ChunkCoordIntPair)var12.next();
-			var3 = var13.chunkXPos * 16;
-			var4 = var13.chunkZPos * 16;
+			var1 = var13.chunkXPos * 16;
+			var2 = var13.chunkZPos * 16;
 			Chunk var14 = this.getChunkFromChunkCoords(var13.chunkXPos, var13.chunkZPos);
 			int var8;
 			int var9;
 			int var10;
 			if(this.soundCounter == 0) {
 				this.field_9437_g = this.field_9437_g * 3 + 1013904223;
-				var6 = this.field_9437_g >> 2;
-				var7 = var6 & 15;
-				var8 = var6 >> 8 & 15;
-				var9 = var6 >> 16 & 127;
-				var10 = var14.getBlockID(var7, var9, var8);
-				var7 += var3;
-				var8 += var4;
-				if(var10 == 0 && this.getFullBlockLightValue(var7, var9, var8) <= this.rand.nextInt(8) && this.getSavedLightValue(EnumSkyBlock.Sky, var7, var9, var8) <= 0) {
-					EntityPlayer var11 = this.getClosestPlayer((double)var7 + 0.5D, (double)var9 + 0.5D, (double)var8 + 0.5D, 8.0D);
-					if(var11 != null && var11.getDistanceSq((double)var7 + 0.5D, (double)var9 + 0.5D, (double)var8 + 0.5D) > 4.0D) {
-						this.playSoundEffect((double)var7 + 0.5D, (double)var9 + 0.5D, (double)var8 + 0.5D, "ambient.cave.cave", 0.7F, 0.8F + this.rand.nextFloat() * 0.2F);
+				var3 = this.field_9437_g >> 2;
+				var4 = var3 & 15;
+				var8 = var3 >> 8 & 15;
+				var9 = var3 >> 16 & 127;
+				var10 = var14.getBlockID(var4, var9, var8);
+				var4 += var1;
+				var8 += var2;
+				if(var10 == 0 && this.getFullBlockLightValue(var4, var9, var8) <= this.rand.nextInt(8) && this.getSavedLightValue(EnumSkyBlock.Sky, var4, var9, var8) <= 0) {
+					EntityPlayer var11 = this.getClosestPlayer((double)var4 + 0.5D, (double)var9 + 0.5D, (double)var8 + 0.5D, 8.0D);
+					if(var11 != null && var11.getDistanceSq((double)var4 + 0.5D, (double)var9 + 0.5D, (double)var8 + 0.5D) > 4.0D) {
+						this.playSoundEffect((double)var4 + 0.5D, (double)var9 + 0.5D, (double)var8 + 0.5D, "ambient.cave.cave", 0.7F, 0.8F + this.rand.nextFloat() * 0.2F);
 						this.soundCounter = this.rand.nextInt(12000) + 6000;
 					}
 				}
@@ -1912,12 +1906,12 @@
 
 			if(this.rand.nextInt(100000) == 0 && this.func_27161_C() && this.func_27160_B()) {
 				this.field_9437_g = this.field_9437_g * 3 + 1013904223;
-				var6 = this.field_9437_g >> 2;
-				var7 = var3 + (var6 & 15);
-				var8 = var4 + (var6 >> 8 & 15);
-				var9 = this.findTopSolidBlock(var7, var8);
-				if(this.canBlockBeRainedOn(var7, var9, var8)) {
-					this.addWeatherEffect(new EntityLightningBolt(this, (double)var7, (double)var9, (double)var8));
+				var3 = this.field_9437_g >> 2;
+				var4 = var1 + (var3 & 15);
+				var8 = var2 + (var3 >> 8 & 15);
+				var9 = this.findTopSolidBlock(var4, var8);
+				if(this.canBlockBeRainedOn(var4, var9, var8)) {
+					this.addWeatherEffect(new EntityLightningBolt(this, (double)var4, (double)var9, (double)var8));
 					this.field_27168_F = 2;
 				}
 			}
@@ -1925,32 +1919,32 @@
 			int var15;
 			if(this.rand.nextInt(16) == 0) {
 				this.field_9437_g = this.field_9437_g * 3 + 1013904223;
-				var6 = this.field_9437_g >> 2;
-				var7 = var6 & 15;
-				var8 = var6 >> 8 & 15;
-				var9 = this.findTopSolidBlock(var7 + var3, var8 + var4);
-				if(this.getWorldChunkManager().getBiomeGenAt(var7 + var3, var8 + var4).getEnableSnow() && var9 >= 0 && var9 < 128 && var14.getSavedLightValue(EnumSkyBlock.Block, var7, var9, var8) < 10) {
-					var10 = var14.getBlockID(var7, var9 - 1, var8);
-					var15 = var14.getBlockID(var7, var9, var8);
-					if(this.func_27161_C() && var15 == 0 && Block.snow.canPlaceBlockAt(this, var7 + var3, var9, var8 + var4) && var10 != 0 && var10 != Block.ice.blockID && Block.blocksList[var10].blockMaterial.getIsSolid()) {
-						this.setBlockWithNotify(var7 + var3, var9, var8 + var4, Block.snow.blockID);
+				var3 = this.field_9437_g >> 2;
+				var4 = var3 & 15;
+				var8 = var3 >> 8 & 15;
+				var9 = this.findTopSolidBlock(var4 + var1, var8 + var2);
+				if(this.getWorldChunkManager().getBiomeGenAt(var4 + var1, var8 + var2).getEnableSnow() && var9 >= 0 && var9 < 128 && var14.getSavedLightValue(EnumSkyBlock.Block, var4, var9, var8) < 10) {
+					var10 = var14.getBlockID(var4, var9 - 1, var8);
+					var15 = var14.getBlockID(var4, var9, var8);
+					if(this.func_27161_C() && var15 == 0 && Block.snow.canPlaceBlockAt(this, var4 + var1, var9, var8 + var2) && var10 != 0 && var10 != Block.ice.blockID && Block.blocksList[var10].blockMaterial.getIsSolid()) {
+						this.setBlockWithNotify(var4 + var1, var9, var8 + var2, Block.snow.blockID);
 					}
 
-					if(var10 == Block.waterStill.blockID && var14.getBlockMetadata(var7, var9 - 1, var8) == 0) {
-						this.setBlockWithNotify(var7 + var3, var9 - 1, var8 + var4, Block.ice.blockID);
+					if(var10 == Block.waterStill.blockID && var14.getBlockMetadata(var4, var9 - 1, var8) == 0) {
+						this.setBlockWithNotify(var4 + var1, var9 - 1, var8 + var2, Block.ice.blockID);
 					}
 				}
 			}
 
-			for(var6 = 0; var6 < 80; ++var6) {
+			for(var3 = 0; var3 < 80; ++var3) {
 				this.field_9437_g = this.field_9437_g * 3 + 1013904223;
-				var7 = this.field_9437_g >> 2;
-				var8 = var7 & 15;
-				var9 = var7 >> 8 & 15;
-				var10 = var7 >> 16 & 127;
+				var4 = this.field_9437_g >> 2;
+				var8 = var4 & 15;
+				var9 = var4 >> 8 & 15;
+				var10 = var4 >> 16 & 127;
 				var15 = var14.blocks[var8 << 11 | var9 << 7 | var10] & 255;
 				if(Block.tickOnLoad[var15]) {
-					Block.blocksList[var15].updateTick(this, var8 + var3, var10, var9 + var4, this.rand);
+					Block.blocksList[var15].updateTick(this, var8 + var1, var10, var9 + var2, this.rand);
 				}
 			}
 		}
@@ -2379,16 +2373,14 @@
 		if(this.allPlayersSleeping && !this.multiplayerWorld) {
 			Iterator var1 = this.playerEntities.iterator();
 
-			EntityPlayer var2;
-			do {
-				if(!var1.hasNext()) {
-					return true;
+			while(var1.hasNext()) {
+				EntityPlayer var2 = (EntityPlayer)var1.next();
+				if(!var2.isPlayerFullyAsleep()) {
+					return false;
 				}
-
-				var2 = (EntityPlayer)var1.next();
-			} while(var2.isPlayerFullyAsleep());
-
-			return false;
+			}
+
+			return true;
 		} else {
 			return false;
 		}
--- net/minecraft/src/ChunkCache.java
+++ net/minecraft/src/ChunkCache.java
@@ -68,7 +68,7 @@
 			int var6;
 			if(var4) {
 				var5 = this.getBlockId(var1, var2, var3);
-				if(var5 == Block.stairSingle.blockID || var5 == Block.tilledField.blockID || var5 == Block.stairCompactPlanks.blockID || var5 == Block.stairCompactCobblestone.blockID) {
+				if(var5 == Block.stairSingle.blockID || var5 == Block.tilledField.blockID || var5 == Block.stairCompactCobblestone.blockID || var5 == Block.stairCompactPlanks.blockID || var5 == Block.stairCompactBrick.blockID || var5 == Block.stairCompactSandstone.blockID) {
 					var6 = this.getLightValueExt(var1, var2 + 1, var3, false);
 					int var7 = this.getLightValueExt(var1 + 1, var2, var3, false);
 					int var8 = this.getLightValueExt(var1 - 1, var2, var3, false);
--- net/minecraft/src/BlockTrapDoor.java
+++ net/minecraft/src/BlockTrapDoor.java
@@ -89,6 +89,7 @@
 			var1.setBlockMetadataWithNotify(var2, var3, var4, var6 ^ 4);
 			var1.func_28107_a((EntityPlayer)null, 1003, var2, var3, var4, 0);
 		}
+
 	}
 
 	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
@@ -112,17 +113,12 @@
 				--var7;
 			}
 
-			if(!var1.isBlockNormalCube(var7, var3, var8)) {
-				var1.setBlockWithNotify(var2, var3, var4, 0);
-				this.dropBlockAsItem(var1, var2, var3, var4, var6);
-			}
-
 			if(var5 > 0 && Block.blocksList[var5].canProvidePower()) {
 				boolean var9 = var1.isBlockIndirectlyGettingPowered(var2, var3, var4);
 				this.onPoweredBlockChange(var1, var2, var3, var4, var9);
 			}
-
 		}
+
 	}
 
 	public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3D var5, Vec3D var6) {
--- net/minecraft/src/EntityCreeper.java
+++ net/minecraft/src/EntityCreeper.java
@@ -29,16 +29,14 @@
 	}
 
 	protected void attackBlockedEntity(Entity var1, float var2) {
-		if(!this.worldObj.multiplayerWorld) {
-			if(this.timeSinceIgnited > 0) {
-				this.setCreeperState(-1);
-				--this.timeSinceIgnited;
-				if(this.timeSinceIgnited < 0) {
-					this.timeSinceIgnited = 0;
-				}
+		if(!this.worldObj.multiplayerWorld && this.timeSinceIgnited > 0) {
+			this.setCreeperState(-1);
+			--this.timeSinceIgnited;
+			if(this.timeSinceIgnited < 0) {
+				this.timeSinceIgnited = 0;
 			}
-
 		}
+
 	}
 
 	public void onUpdate() {
@@ -81,7 +79,7 @@
 	public void onDeath(Entity var1) {
 		super.onDeath(var1);
 		if(var1 instanceof EntitySkeleton) {
-			this.dropItem(Item.record13.shiftedIndex + this.rand.nextInt(2), 1);
+			this.dropItem(Item.record13.shiftedIndex + this.rand.nextInt(16), 1);
 		}
 
 	}
@@ -114,8 +112,8 @@
 					this.timeSinceIgnited = 0;
 				}
 			}
-
 		}
+
 	}
 
 	public boolean getPowered() {
--- net/minecraft/src/BlockJukeBox.java
+++ net/minecraft/src/BlockJukeBox.java
@@ -1,11 +1,17 @@
 package net.minecraft.src;
 
 public class BlockJukeBox extends BlockContainer {
+	private static ModConfig config = new ModConfig("SoundConfig.txt", "# Fix bed sounds\n# 0 = Stone (vanilla)\n# 1 = Wood (modern vanilla)\n# 2 = Cloth\nBedSound=2\n\n# Fix jukebox and noteblock sounds\n# 0 = Stone (vanilla)\n# 1 = Wood\nJukeboxSound=1\nNoteblockSound=1\n\n");
+
 	protected BlockJukeBox(int var1, int var2) {
 		super(var1, var2, Material.wood);
 	}
 
 	public int getBlockTextureFromSide(int var1) {
+		if(config.getProperty("NoteblockSound").equals("1")) {
+			this.setStepSound(soundWoodFootstep);
+		}
+
 		return this.blockIndexInTexture + (var1 == 1 ? 1 : 0);
 	}
 
@@ -25,6 +31,7 @@
 			var6.onInventoryChanged();
 			var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
 		}
+
 	}
 
 	public void func_28038_b_(World var1, int var2, int var3, int var4) {
@@ -37,15 +44,16 @@
 				var5.record = 0;
 				var5.onInventoryChanged();
 				var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
-				float var8 = 0.7F;
-				double var9 = (double)(var1.rand.nextFloat() * var8) + (double)(1.0F - var8) * 0.5D;
-				double var11 = (double)(var1.rand.nextFloat() * var8) + (double)(1.0F - var8) * 0.2D + 0.6D;
-				double var13 = (double)(var1.rand.nextFloat() * var8) + (double)(1.0F - var8) * 0.5D;
-				EntityItem var15 = new EntityItem(var1, (double)var2 + var9, (double)var3 + var11, (double)var4 + var13, new ItemStack(var6, 1, 0));
-				var15.delayBeforeCanPickup = 10;
-				var1.entityJoinedWorld(var15);
+				float var7 = 0.7F;
+				double var8 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
+				double var10 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.2D + 0.6D;
+				double var12 = (double)(var1.rand.nextFloat() * var7) + (double)(1.0F - var7) * 0.5D;
+				EntityItem var14 = new EntityItem(var1, (double)var2 + var8, (double)var3 + var10, (double)var4 + var12, new ItemStack(var6, 1, 0));
+				var14.delayBeforeCanPickup = 10;
+				var1.entityJoinedWorld(var14);
 			}
 		}
+
 	}
 
 	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
@@ -57,6 +65,7 @@
 		if(!var1.multiplayerWorld) {
 			super.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6);
 		}
+
 	}
 
 	protected TileEntity getBlockEntity() {
--- /dev/null
+++ net/minecraft/src/ModRetrieveSkin.java
@@ -1,0 +1,106 @@
+package net.minecraft.src;
+
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.nio.charset.StandardCharsets;
+import java.util.Base64;
+
+public class ModRetrieveSkin {
+	public static String getSkinURL(String var0) {
+		String var1 = accessAPI("https://api.mojang.com/users/profiles/minecraft/", var0, "id");
+		String var2 = getTextureResponse(var1);
+		return extractURL(var2, "SKIN");
+	}
+
+	public static String getCapeURL(String var0) {
+		String var1 = accessAPI("https://api.mojang.com/users/profiles/minecraft/", var0, "id");
+		String var2 = getTextureResponse(var1);
+		return extractURL(var2, "CAPE");
+	}
+
+	public static String getTextureResponse(String var0) {
+		String var1 = accessAPI("https://sessionserver.mojang.com/session/minecraft/profile/", var0, "value");
+		byte[] var2 = Base64.getDecoder().decode(var1);
+		String var3 = new String(var2, StandardCharsets.UTF_8);
+		return var3;
+	}
+
+	public static String getUUID(String var0) {
+		String var1 = accessAPI("https://api.mojang.com/users/profiles/minecraft/", var0, "id");
+		return var1;
+	}
+
+	public static String accessAPI(String var0, String var1, String var2) {
+		String var3 = "";
+
+		try {
+			URL var4 = new URL(var0 + var1);
+			HttpURLConnection var5 = (HttpURLConnection)var4.openConnection();
+			var5.setRequestMethod("GET");
+			BufferedReader var6 = new BufferedReader(new InputStreamReader(var5.getInputStream()));
+			StringBuilder var8 = new StringBuilder();
+
+			while(true) {
+				String var7 = var6.readLine();
+				if(var7 == null) {
+					var6.close();
+					var3 = var8.toString();
+					var5.disconnect();
+					break;
+				}
+
+				var8.append(var7);
+			}
+		} catch (Exception var9) {
+			var9.printStackTrace();
+		}
+
+		return extractValue(var3, var2);
+	}
+
+	public static String extractValue(String var0, String var1) {
+		String var2 = var0.replaceAll("\\{", "").replaceAll("\\}", "").replaceAll("\\s", "").replaceAll("\\]", "");
+		String[] var3 = var2.split(",");
+		String[] var4 = var3;
+		int var5 = var3.length;
+
+		for(int var6 = 0; var6 < var5; ++var6) {
+			String var7 = var4[var6];
+			String[] var8 = var7.split(":");
+			if(var8.length == 2) {
+				String var9 = var8[0].replaceAll("\"", "").trim();
+				String var10 = var8[1].replaceAll("\"", "").trim();
+				if(var1.equals(var9)) {
+					return var10;
+				}
+			}
+		}
+
+		return null;
+	}
+
+	private static String extractURL(String var0, String var1) {
+		int var2 = var0.indexOf("\"textures\"");
+		if(var2 == -1) {
+			return null;
+		} else {
+			int var3 = var0.indexOf("\"" + var1 + "\"", var2);
+			if(var3 == -1) {
+				return null;
+			} else {
+				int var4 = var0.indexOf("\"url\" : \"", var3);
+				if(var4 == -1) {
+					return null;
+				} else {
+					int var5 = var4 + "\"url\" : \"".length();
+					int var6 = var0.indexOf("\"", var5);
+					String var7 = var0.substring(var5, var6);
+					String var8 = var7.replace("http://", "https://");
+					return var8;
+				}
+			}
+		}
+	}
+}
--- net/minecraft/src/CraftingManager.java
+++ net/minecraft/src/CraftingManager.java
@@ -22,7 +22,6 @@
 		(new RecipesArmor()).addRecipes(this);
 		(new RecipesDyes()).addRecipes(this);
 		this.addRecipe(new ItemStack(Item.paper, 3), new Object[]{"###", Character.valueOf('#'), Item.reed});
-		this.addRecipe(new ItemStack(Item.book, 1), new Object[]{"#", "#", "#", Character.valueOf('#'), Item.paper});
 		this.addRecipe(new ItemStack(Block.fence, 2), new Object[]{"###", "###", Character.valueOf('#'), Item.stick});
 		this.addRecipe(new ItemStack(Block.jukebox, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.diamond});
 		this.addRecipe(new ItemStack(Block.musicBlock, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.redstone});
@@ -78,6 +77,7 @@
 		this.addRecipe(new ItemStack(Block.pistonBase, 1), new Object[]{"TTT", "#X#", "#R#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.ingotIron, Character.valueOf('R'), Item.redstone, Character.valueOf('T'), Block.planks});
 		this.addRecipe(new ItemStack(Block.pistonStickyBase, 1), new Object[]{"S", "P", Character.valueOf('S'), Item.slimeBall, Character.valueOf('P'), Block.pistonBase});
 		this.addRecipe(new ItemStack(Item.bed, 1), new Object[]{"###", "XXX", Character.valueOf('#'), Block.cloth, Character.valueOf('X'), Block.planks});
+		this.addShapelessRecipe(new ItemStack(Item.book, 1), new Object[]{new ItemStack(Item.paper, 1), new ItemStack(Item.paper, 1), new ItemStack(Item.paper, 1), new ItemStack(Item.leather, 1)});
 		Collections.sort(this.recipes, new RecipeSorter(this));
 		System.out.println(this.recipes.size() + " recipes");
 	}
@@ -88,7 +88,7 @@
 		int var5 = 0;
 		int var6 = 0;
 		if(var2[var4] instanceof String[]) {
-			String[] var11 = (String[])((String[])var2[var4++]);
+			String[] var11 = (String[])((String[])((String[])((String[])var2[var4++])));
 
 			for(int var8 = 0; var8 < var11.length; ++var8) {
 				String var9 = var11[var8];
--- /dev/null
+++ net/minecraft/src/ModConfig.java
@@ -1,0 +1,48 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.util.Properties;
+
+public class ModConfig {
+	private Properties properties = new Properties();
+
+	public ModConfig(String var1, String var2) {
+		try {
+			File var3 = new File(var1);
+			if(!var3.exists()) {
+				this.createDefaultConfig(var3, var2);
+			}
+
+			FileInputStream var4 = new FileInputStream(var1);
+			this.properties.load(var4);
+			var4.close();
+		} catch (IOException var5) {
+			var5.printStackTrace();
+			System.err.println("Error handling the configuration file: " + var5.getMessage());
+		}
+
+	}
+
+	private void createDefaultConfig(File var1, String var2) throws IOException {
+		var1.createNewFile();
+		FileWriter var3 = null;
+
+		try {
+			var3 = new FileWriter(var1);
+			var3.write(var2);
+		} finally {
+			if(var3 != null) {
+				var3.close();
+			}
+
+		}
+
+	}
+
+	public String getProperty(String var1) {
+		return this.properties.getProperty(var1);
+	}
+}
--- net/minecraft/src/GuiContainer.java
+++ net/minecraft/src/GuiContainer.java
@@ -34,28 +34,28 @@
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
 		Slot var6 = null;
 
-		int var9;
-		int var10;
-		for(int var7 = 0; var7 < this.inventorySlots.slots.size(); ++var7) {
-			Slot var8 = (Slot)this.inventorySlots.slots.get(var7);
-			this.drawSlotInventory(var8);
-			if(this.getIsMouseOverSlot(var8, var1, var2)) {
-				var6 = var8;
+		int var7;
+		int var8;
+		for(int var9 = 0; var9 < this.inventorySlots.slots.size(); ++var9) {
+			Slot var10 = (Slot)this.inventorySlots.slots.get(var9);
+			this.drawSlotInventory(var10);
+			if(this.getIsMouseOverSlot(var10, var1, var2)) {
+				var6 = var10;
 				GL11.glDisable(GL11.GL_LIGHTING);
 				GL11.glDisable(GL11.GL_DEPTH_TEST);
-				var9 = var8.xDisplayPosition;
-				var10 = var8.yDisplayPosition;
-				this.drawGradientRect(var9, var10, var9 + 16, var10 + 16, -2130706433, -2130706433);
+				var7 = var10.xDisplayPosition;
+				var8 = var10.yDisplayPosition;
+				this.drawGradientRect(var7, var8, var7 + 16, var8 + 16, -2130706433, -2130706433);
 				GL11.glEnable(GL11.GL_LIGHTING);
 				GL11.glEnable(GL11.GL_DEPTH_TEST);
 			}
 		}
 
-		InventoryPlayer var12 = this.mc.thePlayer.inventory;
-		if(var12.getItemStack() != null) {
+		InventoryPlayer var13 = this.mc.thePlayer.inventory;
+		if(var13.getItemStack() != null) {
 			GL11.glTranslatef(0.0F, 0.0F, 32.0F);
-			itemRenderer.renderItemIntoGUI(this.fontRenderer, this.mc.renderEngine, var12.getItemStack(), var1 - var4 - 8, var2 - var5 - 8);
-			itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, var12.getItemStack(), var1 - var4 - 8, var2 - var5 - 8);
+			itemRenderer.renderItemIntoGUI(this.fontRenderer, this.mc.renderEngine, var13.getItemStack(), var1 - var4 - 8, var2 - var5 - 8);
+			itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, var13.getItemStack(), var1 - var4 - 8, var2 - var5 - 8);
 		}
 
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
@@ -63,14 +63,20 @@
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_DEPTH_TEST);
 		this.drawGuiContainerForegroundLayer();
-		if(var12.getItemStack() == null && var6 != null && var6.getHasStack()) {
-			String var13 = ("" + StringTranslate.getInstance().translateNamedKey(var6.getStack().getItemName())).trim();
-			if(var13.length() > 0) {
-				var9 = var1 - var4 + 12;
-				var10 = var2 - var5 - 12;
-				int var11 = this.fontRenderer.getStringWidth(var13);
-				this.drawGradientRect(var9 - 3, var10 - 3, var9 + var11 + 3, var10 + 8 + 3, -1073741824, -1073741824);
-				this.fontRenderer.drawStringWithShadow(var13, var9, var10, -1);
+		if(var13.getItemStack() == null && var6 != null && var6.getHasStack()) {
+			String var14 = "";
+
+			try {
+				var14 = ("" + StringTranslate.getInstance().translateNamedKey(var6.getStack().getItemName())).trim();
+			} catch (Exception var12) {
+			}
+
+			if(var14.length() > 0) {
+				var7 = var1 - var4 + 12;
+				var8 = var2 - var5 - 12;
+				int var11 = this.fontRenderer.getStringWidth(var14);
+				this.drawGradientRect(var7 - 3, var8 - 3, var7 + var11 + 3, var8 + 8 + 3, -1073741824, -1073741824);
+				this.fontRenderer.drawStringWithShadow(var14, var7, var8, -1);
 			}
 		}
 
@@ -164,6 +170,7 @@
 		if(this.mc.thePlayer != null) {
 			this.mc.playerController.func_20086_a(this.inventorySlots.windowId, this.mc.thePlayer);
 		}
+
 	}
 
 	public boolean doesGuiPauseGame() {
--- net/minecraft/src/BlockFence.java
+++ net/minecraft/src/BlockFence.java
@@ -1,16 +1,46 @@
 package net.minecraft.src;
 
 public class BlockFence extends Block {
+	private ModConfig config = new ModConfig("FenceFixConfig.txt", "# Fix fences.\n# 0 = Disabled\n# 1 = Enabled\nFixFenceCollision=1\nPlaceFloatingFence=1\n");
+
 	public BlockFence(int var1, int var2) {
 		super(var1, var2, Material.wood);
 	}
 
 	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.getBlockId(var2, var3 - 1, var4) == this.blockID ? true : (!var1.getBlockMaterial(var2, var3 - 1, var4).isSolid() ? false : super.canPlaceBlockAt(var1, var2, var3, var4));
+		return this.config.getProperty("PlaceFloatingFence").equals("0") ? (var1.getBlockId(var2, var3 - 1, var4) == this.blockID ? true : (!var1.getBlockMaterial(var2, var3 - 1, var4).isSolid() ? false : super.canPlaceBlockAt(var1, var2, var3, var4))) : super.canPlaceBlockAt(var1, var2, var3, var4);
 	}
 
 	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		return AxisAlignedBB.getBoundingBoxFromPool((double)var2, (double)var3, (double)var4, (double)(var2 + 1), (double)((float)var3 + 1.5F), (double)(var4 + 1));
+		if(this.config.getProperty("FixFenceCollision").equals("0")) {
+			return AxisAlignedBB.getBoundingBoxFromPool((double)var2, (double)var3, (double)var4, (double)(var2 + 1), (double)((float)var3 + 1.5F), (double)(var4 + 1));
+		} else {
+			boolean var5 = this.isFenceAt(var1, var2, var3, var4 - 1);
+			boolean var6 = this.isFenceAt(var1, var2, var3, var4 + 1);
+			boolean var7 = this.isFenceAt(var1, var2 - 1, var3, var4);
+			boolean var8 = this.isFenceAt(var1, var2 + 1, var3, var4);
+			float var9 = 6.0F / 16.0F;
+			float var10 = 10.0F / 16.0F;
+			float var11 = 6.0F / 16.0F;
+			float var12 = 10.0F / 16.0F;
+			if(var5) {
+				var11 = 0.0F;
+			}
+
+			if(var6) {
+				var12 = 1.0F;
+			}
+
+			if(var7) {
+				var9 = 0.0F;
+			}
+
+			if(var8) {
+				var10 = 1.0F;
+			}
+
+			return AxisAlignedBB.getBoundingBoxFromPool((double)((float)var2 + var9), (double)var3, (double)((float)var4 + var11), (double)((float)var2 + var10), (double)((float)var3 + 1.5F), (double)((float)var4 + var12));
+		}
 	}
 
 	public boolean isOpaqueCube() {
@@ -23,5 +53,41 @@
 
 	public int getRenderType() {
 		return 11;
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
+		if(this.config.getProperty("FixFenceCollision").equals("1")) {
+			boolean var5 = this.isFenceAt(var1, var2, var3, var4 - 1);
+			boolean var6 = this.isFenceAt(var1, var2, var3, var4 + 1);
+			boolean var7 = this.isFenceAt(var1, var2 - 1, var3, var4);
+			boolean var8 = this.isFenceAt(var1, var2 + 1, var3, var4);
+			float var9 = 6.0F / 16.0F;
+			float var10 = 10.0F / 16.0F;
+			float var11 = 6.0F / 16.0F;
+			float var12 = 10.0F / 16.0F;
+			if(var5) {
+				var11 = 0.0F;
+			}
+
+			if(var6) {
+				var12 = 1.0F;
+			}
+
+			if(var7) {
+				var9 = 0.0F;
+			}
+
+			if(var8) {
+				var10 = 1.0F;
+			}
+
+			this.setBlockBounds(var9, 0.0F, var11, var10, 1.0F, var12);
+		}
+
+	}
+
+	public boolean isFenceAt(IBlockAccess var1, int var2, int var3, int var4) {
+		int var5 = var1.getBlockId(var2, var3, var4);
+		return var5 == this.blockID || var5 == 107;
 	}
 }
--- net/minecraft/src/EntityOtherPlayerMP.java
+++ net/minecraft/src/EntityOtherPlayerMP.java
@@ -15,7 +15,7 @@
 		this.yOffset = 0.0F;
 		this.stepHeight = 0.0F;
 		if(var2 != null && var2.length() > 0) {
-			this.skinUrl = "http://s3.amazonaws.com/MinecraftSkins/" + var2 + ".png";
+			this.skinUrl = ModRetrieveSkin.getSkinURL(this.username);
 		}
 
 		this.noClip = true;
--- net/minecraft/src/PlayerControllerSP.java
+++ net/minecraft/src/PlayerControllerSP.java
@@ -61,37 +61,35 @@
 	public void sendBlockRemoving(int var1, int var2, int var3, int var4) {
 		if(this.blockHitWait > 0) {
 			--this.blockHitWait;
-		} else {
-			if(var1 == this.field_1074_c && var2 == this.field_1073_d && var3 == this.field_1072_e) {
-				int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
-				if(var5 == 0) {
-					return;
-				}
-
-				Block var6 = Block.blocksList[var5];
-				this.curBlockDamage += var6.blockStrength(this.mc.thePlayer);
-				if(this.field_1069_h % 4.0F == 0.0F && var6 != null) {
-					this.mc.sndManager.playSound(var6.stepSound.func_1145_d(), (float)var1 + 0.5F, (float)var2 + 0.5F, (float)var3 + 0.5F, (var6.stepSound.getVolume() + 1.0F) / 8.0F, var6.stepSound.getPitch() * 0.5F);
-				}
-
-				++this.field_1069_h;
-				if(this.curBlockDamage >= 1.0F) {
-					this.sendBlockRemoved(var1, var2, var3, var4);
-					this.curBlockDamage = 0.0F;
-					this.prevBlockDamage = 0.0F;
-					this.field_1069_h = 0.0F;
-					this.blockHitWait = 5;
-				}
-			} else {
+		} else if(var1 == this.field_1074_c && var2 == this.field_1073_d && var3 == this.field_1072_e) {
+			int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
+			if(var5 == 0) {
+				return;
+			}
+
+			Block var6 = Block.blocksList[var5];
+			this.curBlockDamage += var6.blockStrength(this.mc.thePlayer);
+			if(this.field_1069_h % 4.0F == 0.0F && var6 != null) {
+				this.mc.sndManager.playSound(var6.stepSound.func_1145_d(), (float)var1 + 0.5F, (float)var2 + 0.5F, (float)var3 + 0.5F, (var6.stepSound.getVolume() + 1.0F) / 8.0F, var6.stepSound.getPitch() * 0.5F);
+			}
+
+			++this.field_1069_h;
+			if(this.curBlockDamage >= 1.0F) {
+				this.sendBlockRemoved(var1, var2, var3, var4);
 				this.curBlockDamage = 0.0F;
 				this.prevBlockDamage = 0.0F;
 				this.field_1069_h = 0.0F;
-				this.field_1074_c = var1;
-				this.field_1073_d = var2;
-				this.field_1072_e = var3;
+				this.blockHitWait = 0;
 			}
-
+		} else {
+			this.curBlockDamage = 0.0F;
+			this.prevBlockDamage = 0.0F;
+			this.field_1069_h = 0.0F;
+			this.field_1074_c = var1;
+			this.field_1073_d = var2;
+			this.field_1072_e = var3;
 		}
+
 	}
 
 	public void setPartialTime(float var1) {
--- net/minecraft/src/BlockStairs.java
+++ net/minecraft/src/BlockStairs.java
@@ -91,7 +91,7 @@
 	}
 
 	public int idDropped(int var1, Random var2) {
-		return this.modelBlock.idDropped(var1, var2);
+		return this.blockID;
 	}
 
 	public int quantityDropped(Random var1) {
@@ -144,7 +144,7 @@
 	}
 
 	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
-		this.modelBlock.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6);
+		super.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6);
 	}
 
 	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
--- net/minecraft/src/EntityPlayerSP.java
+++ net/minecraft/src/EntityPlayerSP.java
@@ -11,13 +11,13 @@
 
 	public EntityPlayerSP(Minecraft var1, World var2, Session var3, int var4) {
 		super(var2);
+		this.username = var3.username;
 		this.mc = var1;
 		this.dimension = var4;
 		if(var3 != null && var3.username != null && var3.username.length() > 0) {
-			this.skinUrl = "http://s3.amazonaws.com/MinecraftSkins/" + var3.username + ".png";
+			this.skinUrl = ModRetrieveSkin.getSkinURL(this.username);
 		}
 
-		this.username = var3.username;
 	}
 
 	public void moveEntity(double var1, double var3, double var5) {
@@ -187,8 +187,8 @@
 			} else {
 				this.mc.statFileWriter.readStat(var1, var2);
 			}
-
 		}
+
 	}
 
 	private boolean isBlockTranslucent(int var1, int var2, int var3) {
--- net/minecraft/src/BlockSand.java
+++ net/minecraft/src/BlockSand.java
@@ -3,6 +3,7 @@
 import java.util.Random;
 
 public class BlockSand extends Block {
+	private ModConfig config = new ModConfig("FarLandFixConfig.txt", "# Far Land Fixes\n# Fix jitter at far coordinates\nFixFarJitter=1\n# Fix sand/gravel behaving strangely at far coordinates\nFixFarGravityBlocks=1\n");
 	public static boolean fallInstantly = false;
 
 	public BlockSand(int var1, int var2) {
@@ -23,10 +24,14 @@
 
 	private void tryToFall(World var1, int var2, int var3, int var4) {
 		if(canFallBelow(var1, var2, var3 - 1, var4) && var3 >= 0) {
-			byte var8 = 32;
-			if(!fallInstantly && var1.checkChunksExist(var2 - var8, var3 - var8, var4 - var8, var2 + var8, var3 + var8, var4 + var8)) {
-				EntityFallingSand var9 = new EntityFallingSand(var1, (double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), this.blockID);
-				var1.entityJoinedWorld(var9);
+			byte var5 = 32;
+			if(!fallInstantly && var1.checkChunksExist(var2 - var5, var3 - var5, var4 - var5, var2 + var5, var3 + var5, var4 + var5)) {
+				EntityFallingSand var6 = new EntityFallingSand(var1, (double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), this.blockID);
+				if(this.config.getProperty("FixFarGravityBlocks").equals("1")) {
+					var6 = new EntityFallingSand(var1, (double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, this.blockID);
+				}
+
+				var1.entityJoinedWorld(var6);
 			} else {
 				var1.setBlockWithNotify(var2, var3, var4, 0);
 
--- net/minecraft/src/EntityPlayer.java
+++ net/minecraft/src/EntityPlayer.java
@@ -133,7 +133,7 @@
 	}
 
 	public void updateCloak() {
-		this.playerCloakUrl = "http://s3.amazonaws.com/MinecraftCloaks/" + this.username + ".png";
+		this.playerCloakUrl = ModRetrieveSkin.getCapeURL(this.username);
 		this.cloakUrl = this.playerCloakUrl;
 	}
 
@@ -282,6 +282,7 @@
 			this.joinEntityItemWithWorld(var3);
 			this.addStat(StatList.dropStat, 1);
 		}
+
 	}
 
 	protected void joinEntityItemWithWorld(EntityItem var1) {
@@ -413,7 +414,7 @@
 				Iterator var4 = var7.iterator();
 
 				while(true) {
-					EntityWolf var6;
+					EntityWolf var5;
 					do {
 						do {
 							do {
@@ -422,18 +423,19 @@
 										return;
 									}
 
-									Entity var5 = (Entity)var4.next();
-									var6 = (EntityWolf)var5;
-								} while(!var6.isWolfTamed());
-							} while(var6.getTarget() != null);
-						} while(!this.username.equals(var6.getWolfOwner()));
-					} while(var2 && var6.isWolfSitting());
+									Entity var6 = (Entity)var4.next();
+									var5 = (EntityWolf)var6;
+								} while(!var5.isWolfTamed());
+							} while(var5.getTarget() != null);
+						} while(!this.username.equals(var5.getWolfOwner()));
+					} while(var2 && var5.isWolfSitting());
 
-					var6.setWolfSitting(false);
-					var6.setTarget(var1);
+					var5.setWolfSitting(false);
+					var5.setTarget(var1);
 				}
 			}
 		}
+
 	}
 
 	protected void damageEntity(int var1) {
@@ -464,8 +466,8 @@
 					this.destroyCurrentEquippedItem();
 				}
 			}
-
 		}
+
 	}
 
 	public ItemStack getCurrentEquippedItem() {
@@ -755,8 +757,8 @@
 					this.addStat(StatList.distanceFlownStat, var7);
 				}
 			}
-
 		}
+
 	}
 
 	private void addMountedMovementStat(double var1, double var3, double var5) {
@@ -810,5 +812,6 @@
 		} else {
 			this.inPortal = true;
 		}
+
 	}
 }
--- net/minecraft/src/BlockPressurePlate.java
+++ net/minecraft/src/BlockPressurePlate.java
@@ -4,6 +4,7 @@
 import java.util.Random;
 
 public class BlockPressurePlate extends Block {
+	private ModConfig config = new ModConfig("FenceFixConfig.txt", "# Fix fences.\n# 0 = Disabled\n# 1 = Enabled\nFixFenceCollision=1\nPlaceFloatingFence=1\nPlacePressurePlateOnFence=1\n");
 	private EnumMobType triggerMobType;
 
 	protected BlockPressurePlate(int var1, int var2, EnumMobType var3, Material var4) {
@@ -31,7 +32,7 @@
 	}
 
 	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2, var3 - 1, var4);
+		return !this.config.getProperty("PlacePressurePlateOnFence").equals("1") ? var1.isBlockNormalCube(var2, var3 - 1, var4) : var1.isBlockNormalCube(var2, var3 - 1, var4) || var1.getBlockId(var2, var3 - 1, var4) == Block.fence.blockID;
 	}
 
 	public void onBlockAdded(World var1, int var2, int var3, int var4) {
@@ -39,7 +40,7 @@
 
 	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
 		boolean var6 = false;
-		if(!var1.isBlockNormalCube(var2, var3 - 1, var4)) {
+		if(!var1.isBlockNormalCube(var2, var3 - 1, var4) && var1.getBlockId(var2, var3 - 1, var4) != Block.fence.blockID) {
 			var6 = true;
 		}
 
@@ -51,19 +52,17 @@
 	}
 
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(!var1.multiplayerWorld) {
-			if(var1.getBlockMetadata(var2, var3, var4) != 0) {
-				this.setStateIfMobInteractsWithPlate(var1, var2, var3, var4);
-			}
+		if(!var1.multiplayerWorld && var1.getBlockMetadata(var2, var3, var4) != 0) {
+			this.setStateIfMobInteractsWithPlate(var1, var2, var3, var4);
 		}
+
 	}
 
 	public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
-		if(!var1.multiplayerWorld) {
-			if(var1.getBlockMetadata(var2, var3, var4) != 1) {
-				this.setStateIfMobInteractsWithPlate(var1, var2, var3, var4);
-			}
+		if(!var1.multiplayerWorld && var1.getBlockMetadata(var2, var3, var4) != 1) {
+			this.setStateIfMobInteractsWithPlate(var1, var2, var3, var4);
 		}
+
 	}
 
 	private void setStateIfMobInteractsWithPlate(World var1, int var2, int var3, int var4) {
--- net/minecraft/src/RenderGlobal.java
+++ net/minecraft/src/RenderGlobal.java
@@ -83,19 +83,19 @@
 		Tessellator var4 = Tessellator.instance;
 		this.glSkyList = this.starGLCallList + 1;
 		GL11.glNewList(this.glSkyList, GL11.GL_COMPILE);
-		byte var6 = 64;
-		int var7 = 256 / var6 + 2;
-		float var5 = 16.0F;
+		byte var5 = 64;
+		int var6 = 256 / var5 + 2;
+		float var7 = 16.0F;
 
 		int var8;
 		int var9;
-		for(var8 = -var6 * var7; var8 <= var6 * var7; var8 += var6) {
-			for(var9 = -var6 * var7; var9 <= var6 * var7; var9 += var6) {
+		for(var8 = -var5 * var6; var8 <= var5 * var6; var8 += var5) {
+			for(var9 = -var5 * var6; var9 <= var5 * var6; var9 += var5) {
 				var4.startDrawingQuads();
-				var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + 0));
-				var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + 0));
-				var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + var6));
-				var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + var6));
+				var4.addVertex((double)(var8 + 0), (double)var7, (double)(var9 + 0));
+				var4.addVertex((double)(var8 + var5), (double)var7, (double)(var9 + 0));
+				var4.addVertex((double)(var8 + var5), (double)var7, (double)(var9 + var5));
+				var4.addVertex((double)(var8 + 0), (double)var7, (double)(var9 + var5));
 				var4.draw();
 			}
 		}
@@ -103,15 +103,15 @@
 		GL11.glEndList();
 		this.glSkyList2 = this.starGLCallList + 2;
 		GL11.glNewList(this.glSkyList2, GL11.GL_COMPILE);
-		var5 = -16.0F;
+		var7 = -16.0F;
 		var4.startDrawingQuads();
 
-		for(var8 = -var6 * var7; var8 <= var6 * var7; var8 += var6) {
-			for(var9 = -var6 * var7; var9 <= var6 * var7; var9 += var6) {
-				var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + 0));
-				var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + 0));
-				var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + var6));
-				var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + var6));
+		for(var8 = -var5 * var6; var8 <= var5 * var6; var8 += var5) {
+			for(var9 = -var5 * var6; var9 <= var5 * var6; var9 += var5) {
+				var4.addVertex((double)(var8 + var5), (double)var7, (double)(var9 + 0));
+				var4.addVertex((double)(var8 + 0), (double)var7, (double)(var9 + 0));
+				var4.addVertex((double)(var8 + 0), (double)var7, (double)(var9 + var5));
+				var4.addVertex((double)(var8 + var5), (double)var7, (double)(var9 + var5));
 			}
 		}
 
@@ -152,13 +152,13 @@
 					double var39 = 0.0D;
 					double var41 = (double)((var38 & 2) - 1) * var10;
 					double var43 = (double)((var38 + 1 & 2) - 1) * var10;
-					double var47 = var41 * var36 - var43 * var34;
-					double var49 = var43 * var36 + var41 * var34;
-					double var53 = var47 * var28 + var39 * var30;
-					double var55 = var39 * var28 - var47 * var30;
-					double var57 = var55 * var22 - var49 * var24;
-					double var61 = var49 * var22 + var55 * var24;
-					var2.addVertex(var14 + var57, var16 + var53, var18 + var61);
+					double var45 = var41 * var36 - var43 * var34;
+					double var47 = var43 * var36 + var41 * var34;
+					double var49 = var45 * var28 + var39 * var30;
+					double var51 = var39 * var28 - var45 * var30;
+					double var53 = var51 * var22 - var47 * var24;
+					double var55 = var47 * var22 + var51 * var24;
+					var2.addVertex(var14 + var53, var16 + var49, var18 + var55);
 				}
 			}
 		}
@@ -303,8 +303,8 @@
 			for(var6 = 0; var6 < this.tileEntities.size(); ++var6) {
 				TileEntityRenderer.instance.renderTileEntity((TileEntity)this.tileEntities.get(var6), var3);
 			}
-
 		}
+
 	}
 
 	public String getDebugInfoRenders() {
@@ -405,7 +405,7 @@
 			this.renderersSkippingRenderPass = 0;
 		}
 
-		double var33 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * var3;
+		double var35 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * var3;
 		double var7 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * var3;
 		double var9 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * var3;
 		double var11 = var1.posX - this.prevSortX;
@@ -421,23 +421,24 @@
 
 		RenderHelper.disableStandardItemLighting();
 		byte var17 = 0;
-		int var34;
+		int var18;
 		if(this.occlusionEnabled && this.mc.gameSettings.advancedOpengl && !this.mc.gameSettings.anaglyph && var2 == 0) {
-			byte var18 = 0;
-			int var19 = 16;
-			this.checkOcclusionQueryResult(var18, var19);
+			byte var19 = 0;
+			int var20 = 16;
+			this.checkOcclusionQueryResult(var19, var20);
 
-			for(int var20 = var18; var20 < var19; ++var20) {
-				this.sortedWorldRenderers[var20].isVisible = true;
+			int var21;
+			for(var21 = var19; var21 < var20; ++var21) {
+				this.sortedWorldRenderers[var21].isVisible = true;
 			}
 
-			var34 = var17 + this.renderSortedRenderers(var18, var19, var2, var3);
+			var18 = var17 + this.renderSortedRenderers(var19, var20, var2, var3);
 
 			do {
-				int var35 = var19;
-				var19 *= 2;
-				if(var19 > this.sortedWorldRenderers.length) {
-					var19 = this.sortedWorldRenderers.length;
+				var21 = var20;
+				var20 *= 2;
+				if(var20 > this.sortedWorldRenderers.length) {
+					var20 = this.sortedWorldRenderers.length;
 				}
 
 				GL11.glDisable(GL11.GL_TEXTURE_2D);
@@ -446,42 +447,42 @@
 				GL11.glDisable(GL11.GL_FOG);
 				GL11.glColorMask(false, false, false, false);
 				GL11.glDepthMask(false);
-				this.checkOcclusionQueryResult(var35, var19);
+				this.checkOcclusionQueryResult(var21, var20);
 				GL11.glPushMatrix();
-				float var36 = 0.0F;
-				float var21 = 0.0F;
 				float var22 = 0.0F;
+				float var23 = 0.0F;
+				float var24 = 0.0F;
 
-				for(int var23 = var35; var23 < var19; ++var23) {
-					if(this.sortedWorldRenderers[var23].skipAllRenderPasses()) {
-						this.sortedWorldRenderers[var23].isInFrustum = false;
+				for(int var25 = var21; var25 < var20; ++var25) {
+					if(this.sortedWorldRenderers[var25].skipAllRenderPasses()) {
+						this.sortedWorldRenderers[var25].isInFrustum = false;
 					} else {
-						if(!this.sortedWorldRenderers[var23].isInFrustum) {
-							this.sortedWorldRenderers[var23].isVisible = true;
+						if(!this.sortedWorldRenderers[var25].isInFrustum) {
+							this.sortedWorldRenderers[var25].isVisible = true;
 						}
 
-						if(this.sortedWorldRenderers[var23].isInFrustum && !this.sortedWorldRenderers[var23].isWaitingOnOcclusionQuery) {
-							float var24 = MathHelper.sqrt_float(this.sortedWorldRenderers[var23].distanceToEntitySquared(var1));
-							int var25 = (int)(1.0F + var24 / 128.0F);
-							if(this.cloudOffsetX % var25 == var23 % var25) {
-								WorldRenderer var26 = this.sortedWorldRenderers[var23];
-								float var27 = (float)((double)var26.posXMinus - var33);
-								float var28 = (float)((double)var26.posYMinus - var7);
-								float var29 = (float)((double)var26.posZMinus - var9);
-								float var30 = var27 - var36;
-								float var31 = var28 - var21;
+						if(this.sortedWorldRenderers[var25].isInFrustum && !this.sortedWorldRenderers[var25].isWaitingOnOcclusionQuery) {
+							float var26 = MathHelper.sqrt_float(this.sortedWorldRenderers[var25].distanceToEntitySquared(var1));
+							int var27 = (int)(1.0F + var26 / 128.0F);
+							if(this.cloudOffsetX % var27 == var25 % var27) {
+								WorldRenderer var28 = this.sortedWorldRenderers[var25];
+								float var29 = (float)((double)var28.posXMinus - var35);
+								float var30 = (float)((double)var28.posYMinus - var7);
+								float var31 = (float)((double)var28.posZMinus - var9);
 								float var32 = var29 - var22;
-								if(var30 != 0.0F || var31 != 0.0F || var32 != 0.0F) {
-									GL11.glTranslatef(var30, var31, var32);
-									var36 += var30;
-									var21 += var31;
+								float var33 = var30 - var23;
+								float var34 = var31 - var24;
+								if(var32 != 0.0F || var33 != 0.0F || var34 != 0.0F) {
+									GL11.glTranslatef(var32, var33, var34);
 									var22 += var32;
+									var23 += var33;
+									var24 += var34;
 								}
 
-								ARBOcclusionQuery.glBeginQueryARB(GL15.GL_SAMPLES_PASSED, this.sortedWorldRenderers[var23].glOcclusionQuery);
-								this.sortedWorldRenderers[var23].callOcclusionQueryList();
+								ARBOcclusionQuery.glBeginQueryARB(GL15.GL_SAMPLES_PASSED, this.sortedWorldRenderers[var25].glOcclusionQuery);
+								this.sortedWorldRenderers[var25].callOcclusionQueryList();
 								ARBOcclusionQuery.glEndQueryARB(GL15.GL_SAMPLES_PASSED);
-								this.sortedWorldRenderers[var23].isWaitingOnOcclusionQuery = true;
+								this.sortedWorldRenderers[var25].isWaitingOnOcclusionQuery = true;
 							}
 						}
 					}
@@ -502,13 +503,13 @@
 				GL11.glEnable(GL11.GL_TEXTURE_2D);
 				GL11.glEnable(GL11.GL_ALPHA_TEST);
 				GL11.glEnable(GL11.GL_FOG);
-				var34 += this.renderSortedRenderers(var35, var19, var2, var3);
-			} while(var19 < this.sortedWorldRenderers.length);
+				var18 += this.renderSortedRenderers(var21, var20, var2, var3);
+			} while(var20 < this.sortedWorldRenderers.length);
 		} else {
-			var34 = var17 + this.renderSortedRenderers(0, this.sortedWorldRenderers.length, var2, var3);
+			var18 = var17 + this.renderSortedRenderers(0, this.sortedWorldRenderers.length, var2, var3);
 		}
 
-		return var34;
+		return var18;
 	}
 
 	private void checkOcclusionQueryResult(int var1, int var2) {
@@ -605,19 +606,19 @@
 			float var3 = (float)var2.xCoord;
 			float var4 = (float)var2.yCoord;
 			float var5 = (float)var2.zCoord;
+			float var6;
 			float var7;
-			float var8;
 			if(this.mc.gameSettings.anaglyph) {
-				float var6 = (var3 * 30.0F + var4 * 59.0F + var5 * 11.0F) / 100.0F;
-				var7 = (var3 * 30.0F + var4 * 70.0F) / 100.0F;
-				var8 = (var3 * 30.0F + var5 * 70.0F) / 100.0F;
-				var3 = var6;
-				var4 = var7;
-				var5 = var8;
+				float var8 = (var3 * 30.0F + var4 * 59.0F + var5 * 11.0F) / 100.0F;
+				var6 = (var3 * 30.0F + var4 * 70.0F) / 100.0F;
+				var7 = (var3 * 30.0F + var5 * 70.0F) / 100.0F;
+				var3 = var8;
+				var4 = var6;
+				var5 = var7;
 			}
 
 			GL11.glColor3f(var3, var4, var5);
-			Tessellator var17 = Tessellator.instance;
+			Tessellator var19 = Tessellator.instance;
 			GL11.glDepthMask(false);
 			GL11.glEnable(GL11.GL_FOG);
 			GL11.glColor3f(var3, var4, var5);
@@ -627,45 +628,45 @@
 			GL11.glEnable(GL11.GL_BLEND);
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 			RenderHelper.disableStandardItemLighting();
-			float[] var18 = this.worldObj.worldProvider.calcSunriseSunsetColors(this.worldObj.getCelestialAngle(var1), var1);
-			float var9;
+			float[] var9 = this.worldObj.worldProvider.calcSunriseSunsetColors(this.worldObj.getCelestialAngle(var1), var1);
 			float var10;
 			float var11;
 			float var12;
-			if(var18 != null) {
+			float var13;
+			if(var9 != null) {
 				GL11.glDisable(GL11.GL_TEXTURE_2D);
 				GL11.glShadeModel(GL11.GL_SMOOTH);
 				GL11.glPushMatrix();
 				GL11.glRotatef(90.0F, 1.0F, 0.0F, 0.0F);
-				var8 = this.worldObj.getCelestialAngle(var1);
-				GL11.glRotatef(var8 > 0.5F ? 180.0F : 0.0F, 0.0F, 0.0F, 1.0F);
-				var9 = var18[0];
-				var10 = var18[1];
-				var11 = var18[2];
+				var7 = this.worldObj.getCelestialAngle(var1);
+				GL11.glRotatef(var7 > 0.5F ? 180.0F : 0.0F, 0.0F, 0.0F, 1.0F);
+				var10 = var9[0];
+				var11 = var9[1];
+				var12 = var9[2];
 				float var14;
 				if(this.mc.gameSettings.anaglyph) {
-					var12 = (var9 * 30.0F + var10 * 59.0F + var11 * 11.0F) / 100.0F;
-					float var13 = (var9 * 30.0F + var10 * 70.0F) / 100.0F;
-					var14 = (var9 * 30.0F + var11 * 70.0F) / 100.0F;
-					var9 = var12;
+					var13 = (var10 * 30.0F + var11 * 59.0F + var12 * 11.0F) / 100.0F;
+					float var15 = (var10 * 30.0F + var11 * 70.0F) / 100.0F;
+					var14 = (var10 * 30.0F + var12 * 70.0F) / 100.0F;
 					var10 = var13;
-					var11 = var14;
-				}
-
-				var17.startDrawing(6);
-				var17.setColorRGBA_F(var9, var10, var11, var18[3]);
-				var17.addVertex(0.0D, 100.0D, 0.0D);
-				byte var19 = 16;
-				var17.setColorRGBA_F(var18[0], var18[1], var18[2], 0.0F);
-
-				for(int var20 = 0; var20 <= var19; ++var20) {
-					var14 = (float)var20 * (float)Math.PI * 2.0F / (float)var19;
-					float var15 = MathHelper.sin(var14);
-					float var16 = MathHelper.cos(var14);
-					var17.addVertex((double)(var15 * 120.0F), (double)(var16 * 120.0F), (double)(-var16 * 40.0F * var18[3]));
-				}
-
-				var17.draw();
+					var11 = var15;
+					var12 = var14;
+				}
+
+				var19.startDrawing(6);
+				var19.setColorRGBA_F(var10, var11, var12, var9[3]);
+				var19.addVertex(0.0D, 100.0D, 0.0D);
+				byte var20 = 16;
+				var19.setColorRGBA_F(var9[0], var9[1], var9[2], 0.0F);
+
+				for(int var16 = 0; var16 <= var20; ++var16) {
+					var14 = (float)var16 * (float)Math.PI * 2.0F / (float)var20;
+					float var17 = MathHelper.sin(var14);
+					float var18 = MathHelper.cos(var14);
+					var19.addVertex((double)(var17 * 120.0F), (double)(var18 * 120.0F), (double)(-var18 * 40.0F * var9[3]));
+				}
+
+				var19.draw();
 				GL11.glPopMatrix();
 				GL11.glShadeModel(GL11.GL_FLAT);
 			}
@@ -673,34 +674,34 @@
 			GL11.glEnable(GL11.GL_TEXTURE_2D);
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE);
 			GL11.glPushMatrix();
-			var7 = 1.0F - this.worldObj.func_27162_g(var1);
-			var8 = 0.0F;
-			var9 = 0.0F;
+			var6 = 1.0F - this.worldObj.func_27162_g(var1);
+			var7 = 0.0F;
 			var10 = 0.0F;
-			GL11.glColor4f(1.0F, 1.0F, 1.0F, var7);
-			GL11.glTranslatef(var8, var9, var10);
+			var11 = 0.0F;
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, var6);
+			GL11.glTranslatef(var7, var10, var11);
 			GL11.glRotatef(0.0F, 0.0F, 0.0F, 1.0F);
 			GL11.glRotatef(this.worldObj.getCelestialAngle(var1) * 360.0F, 1.0F, 0.0F, 0.0F);
-			var11 = 30.0F;
+			var12 = 30.0F;
 			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/terrain/sun.png"));
-			var17.startDrawingQuads();
-			var17.addVertexWithUV((double)(-var11), 100.0D, (double)(-var11), 0.0D, 0.0D);
-			var17.addVertexWithUV((double)var11, 100.0D, (double)(-var11), 1.0D, 0.0D);
-			var17.addVertexWithUV((double)var11, 100.0D, (double)var11, 1.0D, 1.0D);
-			var17.addVertexWithUV((double)(-var11), 100.0D, (double)var11, 0.0D, 1.0D);
-			var17.draw();
-			var11 = 20.0F;
+			var19.startDrawingQuads();
+			var19.addVertexWithUV((double)(-var12), 100.0D, (double)(-var12), 0.0D, 0.0D);
+			var19.addVertexWithUV((double)var12, 100.0D, (double)(-var12), 1.0D, 0.0D);
+			var19.addVertexWithUV((double)var12, 100.0D, (double)var12, 1.0D, 1.0D);
+			var19.addVertexWithUV((double)(-var12), 100.0D, (double)var12, 0.0D, 1.0D);
+			var19.draw();
+			var12 = 20.0F;
 			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/terrain/moon.png"));
-			var17.startDrawingQuads();
-			var17.addVertexWithUV((double)(-var11), -100.0D, (double)var11, 1.0D, 1.0D);
-			var17.addVertexWithUV((double)var11, -100.0D, (double)var11, 0.0D, 1.0D);
-			var17.addVertexWithUV((double)var11, -100.0D, (double)(-var11), 0.0D, 0.0D);
-			var17.addVertexWithUV((double)(-var11), -100.0D, (double)(-var11), 1.0D, 0.0D);
-			var17.draw();
+			var19.startDrawingQuads();
+			var19.addVertexWithUV((double)(-var12), -100.0D, (double)var12, 1.0D, 1.0D);
+			var19.addVertexWithUV((double)var12, -100.0D, (double)var12, 0.0D, 1.0D);
+			var19.addVertexWithUV((double)var12, -100.0D, (double)(-var12), 0.0D, 0.0D);
+			var19.addVertexWithUV((double)(-var12), -100.0D, (double)(-var12), 1.0D, 0.0D);
+			var19.draw();
 			GL11.glDisable(GL11.GL_TEXTURE_2D);
-			var12 = this.worldObj.getStarBrightness(var1) * var7;
-			if(var12 > 0.0F) {
-				GL11.glColor4f(var12, var12, var12, var12);
+			var13 = this.worldObj.getStarBrightness(var1) * var6;
+			if(var13 > 0.0F) {
+				GL11.glColor4f(var13, var13, var13, var13);
 				GL11.glCallList(this.starGLCallList);
 			}
 
@@ -720,6 +721,7 @@
 			GL11.glEnable(GL11.GL_TEXTURE_2D);
 			GL11.glDepthMask(true);
 		}
+
 	}
 
 	public void renderClouds(float var1) {
@@ -777,6 +779,7 @@
 				GL11.glEnable(GL11.GL_CULL_FACE);
 			}
 		}
+
 	}
 
 	public boolean func_27307_a(double var1, double var3, double var5, float var7) {
@@ -926,28 +929,28 @@
 		boolean var3 = false;
 		if(var3) {
 			Collections.sort(this.worldRenderersToUpdate, new RenderSorter(var1));
-			int var17 = this.worldRenderersToUpdate.size() - 1;
-			int var18 = this.worldRenderersToUpdate.size();
+			int var18 = this.worldRenderersToUpdate.size() - 1;
+			int var19 = this.worldRenderersToUpdate.size();
 
-			for(int var19 = 0; var19 < var18; ++var19) {
-				WorldRenderer var20 = (WorldRenderer)this.worldRenderersToUpdate.get(var17 - var19);
+			for(int var20 = 0; var20 < var19; ++var20) {
+				WorldRenderer var21 = (WorldRenderer)this.worldRenderersToUpdate.get(var18 - var20);
 				if(!var2) {
-					if(var20.distanceToEntitySquared(var1) > 256.0F) {
-						if(var20.isInFrustum) {
-							if(var19 >= 3) {
+					if(var21.distanceToEntitySquared(var1) > 256.0F) {
+						if(var21.isInFrustum) {
+							if(var20 >= 3) {
 								return false;
 							}
-						} else if(var19 >= 1) {
+						} else if(var20 >= 1) {
 							return false;
 						}
 					}
-				} else if(!var20.isInFrustum) {
+				} else if(!var21.isInFrustum) {
 					continue;
 				}
 
-				var20.updateRenderer();
-				this.worldRenderersToUpdate.remove(var20);
-				var20.needsUpdate = false;
+				var21.updateRenderer();
+				this.worldRenderersToUpdate.remove(var21);
+				var21.needsUpdate = false;
 			}
 
 			return this.worldRenderersToUpdate.size() == 0;
@@ -1015,39 +1018,40 @@
 
 			var10 = 0;
 
-			int var21;
-			for(var21 = var4 - 1; var21 >= 0; --var21) {
-				WorldRenderer var22 = var6[var21];
-				if(var22 != null) {
-					if(!var22.isInFrustum && var21 != var4 - 1) {
-						var6[var21] = null;
+			int var14;
+			WorldRenderer var15;
+			for(var14 = var4 - 1; var14 >= 0; --var14) {
+				var15 = var6[var14];
+				if(var15 != null) {
+					if(!var15.isInFrustum && var14 != var4 - 1) {
+						var6[var14] = null;
 						var6[0] = null;
 						break;
 					}
 
-					var6[var21].updateRenderer();
-					var6[var21].needsUpdate = false;
+					var6[var14].updateRenderer();
+					var6[var14].needsUpdate = false;
 					++var10;
 				}
 			}
 
-			var21 = 0;
+			var14 = 0;
 			var12 = 0;
 
-			for(var13 = this.worldRenderersToUpdate.size(); var21 != var13; ++var21) {
-				WorldRenderer var14 = (WorldRenderer)this.worldRenderersToUpdate.get(var21);
-				if(var14 != null) {
-					boolean var15 = false;
+			for(var13 = this.worldRenderersToUpdate.size(); var14 != var13; ++var14) {
+				var15 = (WorldRenderer)this.worldRenderersToUpdate.get(var14);
+				if(var15 != null) {
+					boolean var16 = false;
 
-					for(int var16 = 0; var16 < var4 && !var15; ++var16) {
-						if(var14 == var6[var16]) {
-							var15 = true;
+					for(int var17 = 0; var17 < var4 && !var16; ++var17) {
+						if(var15 == var6[var17]) {
+							var16 = true;
 						}
 					}
 
-					if(!var15) {
-						if(var12 != var21) {
-							this.worldRenderersToUpdate.set(var12, var14);
+					if(!var16) {
+						if(var12 != var14) {
+							this.worldRenderersToUpdate.set(var12, var15);
 						}
 
 						++var12;
@@ -1056,12 +1060,12 @@
 			}
 
 			while(true) {
-				--var21;
-				if(var21 < var12) {
+				--var14;
+				if(var14 < var12) {
 					return var8 == var9 + var10;
 				}
 
-				this.worldRenderersToUpdate.remove(var21);
+				this.worldRenderersToUpdate.remove(var14);
 			}
 		}
 	}
@@ -1072,16 +1076,16 @@
 		GL11.glEnable(GL11.GL_ALPHA_TEST);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE);
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, (MathHelper.sin((float)System.currentTimeMillis() / 100.0F) * 0.2F + 0.4F) * 0.5F);
-		int var8;
+		int var7;
 		if(var3 == 0) {
 			if(this.damagePartialTime > 0.0F) {
 				GL11.glBlendFunc(GL11.GL_DST_COLOR, GL11.GL_SRC_COLOR);
-				int var7 = this.renderEngine.getTexture("/terrain.png");
-				GL11.glBindTexture(GL11.GL_TEXTURE_2D, var7);
+				int var8 = this.renderEngine.getTexture("/terrain.png");
+				GL11.glBindTexture(GL11.GL_TEXTURE_2D, var8);
 				GL11.glColor4f(1.0F, 1.0F, 1.0F, 0.5F);
 				GL11.glPushMatrix();
-				var8 = this.worldObj.getBlockId(var2.blockX, var2.blockY, var2.blockZ);
-				Block var9 = var8 > 0 ? Block.blocksList[var8] : null;
+				var7 = this.worldObj.getBlockId(var2.blockX, var2.blockY, var2.blockZ);
+				Block var9 = var7 > 0 ? Block.blocksList[var7] : null;
 				GL11.glDisable(GL11.GL_ALPHA_TEST);
 				GL11.glPolygonOffset(-3.0F, -3.0F);
 				GL11.glEnable(GL11.GL_POLYGON_OFFSET_FILL);
@@ -1110,8 +1114,8 @@
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 			float var16 = MathHelper.sin((float)System.currentTimeMillis() / 100.0F) * 0.2F + 0.8F;
 			GL11.glColor4f(var16, var16, var16, MathHelper.sin((float)System.currentTimeMillis() / 200.0F) * 0.2F + 0.5F);
-			var8 = this.renderEngine.getTexture("/terrain.png");
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var8);
+			var7 = this.renderEngine.getTexture("/terrain.png");
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var7);
 			int var17 = var2.blockX;
 			int var18 = var2.blockY;
 			int var11 = var2.blockZ;
@@ -1254,11 +1258,23 @@
 	}
 
 	public void playRecord(String var1, int var2, int var3, int var4) {
-		if(var1 != null) {
-			this.mc.ingameGUI.setRecordPlayingMessage("C418 - " + var1);
-		}
-
 		this.mc.sndManager.playStreaming(var1, (float)var2, (float)var3, (float)var4, 1.0F, 1.0F);
+		String var5 = "C418";
+		if(var1 != null) {
+			if(var1 != "Pigstep" && var1 != "otherside") {
+				if(var1 == "Five") {
+					var5 = "Samuel \u00c5berg";
+					var1 = "5";
+				} else if(var1 == "Relic") {
+					var5 = "Aaron Cherof";
+				}
+			} else {
+				var5 = "Lena Raine";
+			}
+
+			this.mc.ingameGUI.setRecordPlayingMessage(var5 + " - " + var1);
+		}
+
 	}
 
 	public void playSound(String var1, double var2, double var4, double var6, float var8, float var9) {
@@ -1311,9 +1327,9 @@
 				} else if(var1.equals("heart")) {
 					this.mc.effectRenderer.addEffect(new EntityHeartFX(this.worldObj, var2, var4, var6, var8, var10, var12));
 				}
-
 			}
 		}
+
 	}
 
 	public void obtainEntitySkin(Entity var1) {
@@ -1358,7 +1374,7 @@
 
 	public void func_28136_a(EntityPlayer var1, int var2, int var3, int var4, int var5, int var6) {
 		Random var7 = this.worldObj.rand;
-		int var16;
+		int var8;
 		switch(var2) {
 		case 1000:
 			this.worldObj.playSoundEffect((double)var3, (double)var4, (double)var5, "random.click", 1.0F, 1.0F);
@@ -1387,28 +1403,28 @@
 			}
 			break;
 		case 2000:
-			int var8 = var6 % 3 - 1;
-			int var9 = var6 / 3 % 3 - 1;
-			double var10 = (double)var3 + (double)var8 * 0.6D + 0.5D;
-			double var12 = (double)var4 + 0.5D;
-			double var14 = (double)var5 + (double)var9 * 0.6D + 0.5D;
+			int var9 = var6 % 3 - 1;
+			int var10 = var6 / 3 % 3 - 1;
+			double var11 = (double)var3 + (double)var9 * 0.6D + 0.5D;
+			double var13 = (double)var4 + 0.5D;
+			double var15 = (double)var5 + (double)var10 * 0.6D + 0.5D;
 
-			for(var16 = 0; var16 < 10; ++var16) {
+			for(var8 = 0; var8 < 10; ++var8) {
 				double var31 = var7.nextDouble() * 0.2D + 0.01D;
-				double var19 = var10 + (double)var8 * 0.01D + (var7.nextDouble() - 0.5D) * (double)var9 * 0.5D;
-				double var21 = var12 + (var7.nextDouble() - 0.5D) * 0.5D;
-				double var23 = var14 + (double)var9 * 0.01D + (var7.nextDouble() - 0.5D) * (double)var8 * 0.5D;
-				double var25 = (double)var8 * var31 + var7.nextGaussian() * 0.01D;
+				double var19 = var11 + (double)var9 * 0.01D + (var7.nextDouble() - 0.5D) * (double)var10 * 0.5D;
+				double var21 = var13 + (var7.nextDouble() - 0.5D) * 0.5D;
+				double var23 = var15 + (double)var10 * 0.01D + (var7.nextDouble() - 0.5D) * (double)var9 * 0.5D;
+				double var25 = (double)var9 * var31 + var7.nextGaussian() * 0.01D;
 				double var27 = -0.03D + var7.nextGaussian() * 0.01D;
-				double var29 = (double)var9 * var31 + var7.nextGaussian() * 0.01D;
+				double var29 = (double)var10 * var31 + var7.nextGaussian() * 0.01D;
 				this.spawnParticle("smoke", var19, var21, var23, var25, var27, var29);
 			}
 
 			return;
 		case 2001:
-			var16 = var6 & 255;
-			if(var16 > 0) {
-				Block var17 = Block.blocksList[var16];
+			var8 = var6 & 255;
+			if(var8 > 0) {
+				Block var17 = Block.blocksList[var8];
 				this.mc.sndManager.playSound(var17.stepSound.stepSoundDir(), (float)var3 + 0.5F, (float)var4 + 0.5F, (float)var5 + 0.5F, (var17.stepSound.getVolume() + 1.0F) / 2.0F, var17.stepSound.getPitch() * 0.8F);
 			}
 
--- /dev/null
+++ net/minecraft/src/BlockTrapDoorIron.java
@@ -1,0 +1,186 @@
+package net.minecraft.src;
+
+public class BlockTrapDoorIron extends Block {
+	private static ModConfig config = new ModConfig("BlockBackportsConfig.txt", "BrickStairs=1\nSandstoneStairs=1\nBrickSlab=1\nFenceGate=1\nWoodButton=1\nIronTrapdoor=1\nFloatingIronTrapdoor=0\nToolFix=0\nBigDroppedItemsFix=0\n# Custom wood button recipe is like the button/stick recipe, but with logs, otherwise wood buttons are far too cheap, relative to stone buttons\nModernWoodButtonRecipe=0\nModernStoneButtonRecipe=0\nLeatherBookRecipe=0\n");
+
+	protected BlockTrapDoorIron(int var1, Material var2) {
+		super(var1, var2);
+		this.blockIndexInTexture = 84;
+		if(var2 == Material.iron) {
+			++this.blockIndexInTexture;
+		}
+
+		float var3 = 0.5F;
+		float var4 = 1.0F;
+		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var4, 0.5F + var3);
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 0;
+	}
+
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
+		return super.getSelectedBoundingBoxFromPool(var1, var2, var3, var4);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
+		return super.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
+		this.setBlockBoundsForBlockRender(var1.getBlockMetadata(var2, var3, var4));
+	}
+
+	public void setBlockBoundsForItemRender() {
+		float var1 = 3.0F / 16.0F;
+		this.setBlockBounds(0.0F, 0.5F - var1 / 2.0F, 0.0F, 1.0F, 0.5F + var1 / 2.0F, 1.0F);
+	}
+
+	public void setBlockBoundsForBlockRender(int var1) {
+		float var2 = 3.0F / 16.0F;
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, var2, 1.0F);
+		if(isTrapdoorOpen(var1)) {
+			if((var1 & 3) == 0) {
+				this.setBlockBounds(0.0F, 0.0F, 1.0F - var2, 1.0F, 1.0F, 1.0F);
+			}
+
+			if((var1 & 3) == 1) {
+				this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, var2);
+			}
+
+			if((var1 & 3) == 2) {
+				this.setBlockBounds(1.0F - var2, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+			}
+
+			if((var1 & 3) == 3) {
+				this.setBlockBounds(0.0F, 0.0F, 0.0F, var2, 1.0F, 1.0F);
+			}
+		}
+
+	}
+
+	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+		this.blockActivated(var1, var2, var3, var4, var5);
+	}
+
+	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+		if(this.blockMaterial == Material.iron) {
+			return true;
+		} else {
+			int var6 = var1.getBlockMetadata(var2, var3, var4);
+			var1.setBlockMetadataWithNotify(var2, var3, var4, var6 ^ 4);
+			var1.func_28107_a(var5, 1003, var2, var3, var4, 0);
+			return true;
+		}
+	}
+
+	public void onPoweredBlockChange(World var1, int var2, int var3, int var4, boolean var5) {
+		int var6 = var1.getBlockMetadata(var2, var3, var4);
+		boolean var7 = (var6 & 4) > 0;
+		if(var7 != var5) {
+			var1.setBlockMetadataWithNotify(var2, var3, var4, var6 ^ 4);
+			var1.func_28107_a((EntityPlayer)null, 1003, var2, var3, var4, 0);
+		}
+
+	}
+
+	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+		if(!var1.multiplayerWorld) {
+			int var6 = var1.getBlockMetadata(var2, var3, var4);
+			int var7 = var2;
+			int var8 = var4;
+			if((var6 & 3) == 0) {
+				var8 = var4 + 1;
+			}
+
+			if((var6 & 3) == 1) {
+				--var8;
+			}
+
+			if((var6 & 3) == 2) {
+				var7 = var2 + 1;
+			}
+
+			if((var6 & 3) == 3) {
+				--var7;
+			}
+
+			if(!var1.isBlockNormalCube(var7, var3, var8) && config.getProperty("FloatingIronTrapdoor").equals("0")) {
+				var1.setBlockWithNotify(var2, var3, var4, 0);
+				this.dropBlockAsItem(var1, var2, var3, var4, var6);
+			}
+
+			if(var5 > 0 && Block.blocksList[var5].canProvidePower()) {
+				boolean var9 = var1.isBlockIndirectlyGettingPowered(var2, var3, var4);
+				this.onPoweredBlockChange(var1, var2, var3, var4, var9);
+			}
+		}
+
+	}
+
+	public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3D var5, Vec3D var6) {
+		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
+		return super.collisionRayTrace(var1, var2, var3, var4, var5, var6);
+	}
+
+	public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
+		byte var6 = 0;
+		if(var5 == 2) {
+			var6 = 0;
+		}
+
+		if(var5 == 3) {
+			var6 = 1;
+		}
+
+		if(var5 == 4) {
+			var6 = 2;
+		}
+
+		if(var5 == 5) {
+			var6 = 3;
+		}
+
+		var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
+	}
+
+	public boolean canPlaceBlockOnSide(World var1, int var2, int var3, int var4, int var5) {
+		if(var5 == 0) {
+			return false;
+		} else if(var5 == 1) {
+			return false;
+		} else {
+			if(var5 == 2) {
+				++var4;
+			}
+
+			if(var5 == 3) {
+				--var4;
+			}
+
+			if(var5 == 4) {
+				++var2;
+			}
+
+			if(var5 == 5) {
+				--var2;
+			}
+
+			return var1.isBlockNormalCube(var2, var3, var4);
+		}
+	}
+
+	public static boolean isTrapdoorOpen(int var0) {
+		return (var0 & 4) != 0;
+	}
+}
--- net/minecraft/src/BlockStep.java
+++ net/minecraft/src/BlockStep.java
@@ -3,7 +3,7 @@
 import java.util.Random;
 
 public class BlockStep extends Block {
-	public static final String[] field_22037_a = new String[]{"stone", "sand", "wood", "cobble"};
+	public static final String[] field_22037_a = new String[]{"stone", "sand", "wood", "cobble", "brick"};
 	private boolean blockType;
 
 	public BlockStep(int var1, boolean var2) {
@@ -17,7 +17,7 @@
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return var2 == 0 ? (var1 <= 1 ? 6 : 5) : (var2 == 1 ? (var1 == 0 ? 208 : (var1 == 1 ? 176 : 192)) : (var2 == 2 ? 4 : (var2 == 3 ? 16 : 6)));
+		return var2 == 4 ? 7 : (var2 == 0 ? (var1 <= 1 ? 6 : 5) : (var2 == 1 ? (var1 == 0 ? 208 : (var1 == 1 ? 176 : 192)) : (var2 == 2 ? 4 : (var2 == 3 ? 16 : 6))));
 	}
 
 	public int getBlockTextureFromSide(int var1) {
@@ -36,13 +36,11 @@
 		int var5 = var1.getBlockId(var2, var3 - 1, var4);
 		int var6 = var1.getBlockMetadata(var2, var3, var4);
 		int var7 = var1.getBlockMetadata(var2, var3 - 1, var4);
-		if(var6 == var7) {
-			if(var5 == stairSingle.blockID) {
-				var1.setBlockWithNotify(var2, var3, var4, 0);
-				var1.setBlockAndMetadataWithNotify(var2, var3 - 1, var4, Block.stairDouble.blockID, var6);
-			}
-
+		if(var6 == var7 && var5 == stairSingle.blockID) {
+			var1.setBlockWithNotify(var2, var3, var4, 0);
+			var1.setBlockAndMetadataWithNotify(var2, var3 - 1, var4, Block.stairDouble.blockID, var6);
 		}
+
 	}
 
 	public int idDropped(int var1, Random var2) {
--- net/minecraft/src/BlockBed.java
+++ net/minecraft/src/BlockBed.java
@@ -4,11 +4,20 @@
 import java.util.Random;
 
 public class BlockBed extends Block {
+	private static ModConfig config = new ModConfig("SoundConfig.txt", "# Fix bed sounds\n# 0 = Stone (vanilla)\n# 1 = Wood (modern vanilla)\n# 2 = Cloth\nBedSound=2\n\n# Fix jukebox and noteblock sounds\n# 0 = Stone (vanilla)\n# 1 = Wood\nJukeboxSound=1\nNoteblockSound=1\n\n");
 	public static final int[][] headBlockToFootBlockMap = new int[][]{{0, 1}, {-1, 0}, {0, -1}, {1, 0}};
 
 	public BlockBed(int var1) {
 		super(var1, 134, Material.cloth);
 		this.setBounds();
+		if(config.getProperty("BedSound").equals("1")) {
+			this.setStepSound(soundWoodFootstep);
+		}
+
+		if(config.getProperty("BedSound").equals("2")) {
+			this.setStepSound(soundClothFootstep);
+		}
+
 	}
 
 	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
--- net/minecraft/src/ItemAxe.java
+++ net/minecraft/src/ItemAxe.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public class ItemAxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.planks, Block.bookShelf, Block.wood, Block.chest};
+	private static Block[] blocksEffectiveAgainst = new Block[]{Block.planks, Block.bookShelf, Block.wood, Block.chest, Block.workbench, Block.doorWood, Block.stairCompactPlanks, Block.pressurePlatePlanks, Block.fence, Block.trapdoor, Block.jukebox, Block.pumpkin, Block.pumpkinLantern, Block.signPost, Block.signWall, Block.musicBlock, Block.ladder};
 
 	protected ItemAxe(int var1, EnumToolMaterial var2) {
 		super(var1, 3, var2, blocksEffectiveAgainst);
--- net/minecraft/src/BlockBookshelf.java
+++ net/minecraft/src/BlockBookshelf.java
@@ -3,6 +3,8 @@
 import java.util.Random;
 
 public class BlockBookshelf extends Block {
+	private ModConfig config = new ModConfig("BookshelfDropConfig.txt", "# Fix bookshelf drops\n# 0 = Nothing (vanilla)\n# 1 = x3 Books (modern vanilla)\n# 2 = x1 Bookshelf\nFixBookshelvesDropNothing=2\n");
+
 	public BlockBookshelf(int var1, int var2) {
 		super(var1, var2, Material.wood);
 	}
@@ -11,7 +13,11 @@
 		return var1 <= 1 ? 4 : this.blockIndexInTexture;
 	}
 
+	public int idDropped(int var1, Random var2) {
+		return this.config.getProperty("FixBookshelvesDropNothing").equals("1") ? Item.book.shiftedIndex : Block.bookShelf.blockID;
+	}
+
 	public int quantityDropped(Random var1) {
-		return 0;
+		return this.config.getProperty("FixBookshelvesDropNothing").equals("1") ? 3 : (this.config.getProperty("FixBookshelvesDropNothing").equals("2") ? 1 : 0);
 	}
 }
--- net/minecraft/src/ItemPickaxe.java
+++ net/minecraft/src/ItemPickaxe.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public class ItemPickaxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.stairDouble, Block.stairSingle, Block.stone, Block.sandStone, Block.cobblestoneMossy, Block.oreIron, Block.blockSteel, Block.oreCoal, Block.blockGold, Block.oreGold, Block.oreDiamond, Block.blockDiamond, Block.ice, Block.netherrack, Block.oreLapis, Block.blockLapis};
+	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.stairDouble, Block.stairSingle, Block.stone, Block.sandStone, Block.cobblestoneMossy, Block.oreIron, Block.blockSteel, Block.oreCoal, Block.blockGold, Block.oreGold, Block.oreDiamond, Block.blockDiamond, Block.ice, Block.netherrack, Block.oreLapis, Block.blockLapis, Block.oreRedstone, Block.oreRedstoneGlowing, Block.stairCompactCobblestone, Block.doorSteel, Block.brick, Block.stoneOvenIdle, Block.stoneOvenActive, Block.dispenser, Block.pressurePlateStone, Block.rail, Block.railPowered, Block.railDetector, Block.button};
 
 	protected ItemPickaxe(int var1, EnumToolMaterial var2) {
 		super(var1, 2, var2, blocksEffectiveAgainst);
--- net/minecraft/src/Block.java
+++ net/minecraft/src/Block.java
@@ -117,6 +117,11 @@
 	public static final Block redstoneRepeaterActive = (new BlockRedstoneRepeater(94, true)).setHardness(0.0F).setLightValue(10.0F / 16.0F).setStepSound(soundWoodFootstep).setBlockName("diode").disableStats().disableNeighborNotifyOnMetadataChange();
 	public static final Block lockedChest = (new BlockLockedChest(95)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep).setBlockName("lockedchest").setTickOnLoad(true).disableNeighborNotifyOnMetadataChange();
 	public static final Block trapdoor = (new BlockTrapDoor(96, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep).setBlockName("trapdoor").disableStats().disableNeighborNotifyOnMetadataChange();
+	public static final Block stairCompactBrick = (new BlockStairs(108, brick)).setBlockName("stairsBrick").disableNeighborNotifyOnMetadataChange();
+	public static final Block stairCompactSandstone = (new BlockStairs(128, sandStone)).setBlockName("stairsSandstone").disableNeighborNotifyOnMetadataChange();
+	public static final Block fenceGate = (new BlockFenceGate(107, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("fenceGate").disableNeighborNotifyOnMetadataChange();
+	public static final Block buttonWood = (new BlockButton(143, planks.blockIndexInTexture)).setHardness(0.5F).setStepSound(soundWoodFootstep).setBlockName("button").disableNeighborNotifyOnMetadataChange();
+	public static final Block trapdoorIron = (new BlockTrapDoorIron(97, Material.iron)).setHardness(5.0F).setStepSound(soundMetalFootstep).setBlockName("trapdoorIron").disableStats().disableNeighborNotifyOnMetadataChange();
 	public int blockIndexInTexture;
 	public final int blockID;
 	protected float blockHardness;
@@ -330,8 +335,8 @@
 					}
 				}
 			}
-
 		}
+
 	}
 
 	protected void dropBlockAsItem_do(World var1, int var2, int var3, int var4, ItemStack var5) {
@@ -344,6 +349,7 @@
 			var13.delayBeforeCanPickup = 10;
 			var1.entityJoinedWorld(var13);
 		}
+
 	}
 
 	protected int damageDropped(int var1) {
--- net/minecraft/src/Item.java
+++ net/minecraft/src/Item.java
@@ -1,116 +1,136 @@
 package net.minecraft.src;
 
+import java.io.File;
+import java.io.InputStream;
+import java.nio.file.CopyOption;
+import java.nio.file.Files;
+import java.nio.file.LinkOption;
+import java.nio.file.StandardCopyOption;
 import java.util.Random;
 
 public class Item {
-	protected static Random itemRand = new Random();
-	public static Item[] itemsList = new Item[32000];
-	public static Item shovelSteel = (new ItemSpade(0, EnumToolMaterial.IRON)).setIconCoord(2, 5).setItemName("shovelIron");
-	public static Item pickaxeSteel = (new ItemPickaxe(1, EnumToolMaterial.IRON)).setIconCoord(2, 6).setItemName("pickaxeIron");
-	public static Item axeSteel = (new ItemAxe(2, EnumToolMaterial.IRON)).setIconCoord(2, 7).setItemName("hatchetIron");
-	public static Item flintAndSteel = (new ItemFlintAndSteel(3)).setIconCoord(5, 0).setItemName("flintAndSteel");
-	public static Item appleRed = (new ItemFood(4, 4, false)).setIconCoord(10, 0).setItemName("apple");
-	public static Item bow = (new ItemBow(5)).setIconCoord(5, 1).setItemName("bow");
-	public static Item arrow = (new Item(6)).setIconCoord(5, 2).setItemName("arrow");
-	public static Item coal = (new ItemCoal(7)).setIconCoord(7, 0).setItemName("coal");
-	public static Item diamond = (new Item(8)).setIconCoord(7, 3).setItemName("emerald");
-	public static Item ingotIron = (new Item(9)).setIconCoord(7, 1).setItemName("ingotIron");
-	public static Item ingotGold = (new Item(10)).setIconCoord(7, 2).setItemName("ingotGold");
-	public static Item swordSteel = (new ItemSword(11, EnumToolMaterial.IRON)).setIconCoord(2, 4).setItemName("swordIron");
-	public static Item swordWood = (new ItemSword(12, EnumToolMaterial.WOOD)).setIconCoord(0, 4).setItemName("swordWood");
-	public static Item shovelWood = (new ItemSpade(13, EnumToolMaterial.WOOD)).setIconCoord(0, 5).setItemName("shovelWood");
-	public static Item pickaxeWood = (new ItemPickaxe(14, EnumToolMaterial.WOOD)).setIconCoord(0, 6).setItemName("pickaxeWood");
-	public static Item axeWood = (new ItemAxe(15, EnumToolMaterial.WOOD)).setIconCoord(0, 7).setItemName("hatchetWood");
-	public static Item swordStone = (new ItemSword(16, EnumToolMaterial.STONE)).setIconCoord(1, 4).setItemName("swordStone");
-	public static Item shovelStone = (new ItemSpade(17, EnumToolMaterial.STONE)).setIconCoord(1, 5).setItemName("shovelStone");
-	public static Item pickaxeStone = (new ItemPickaxe(18, EnumToolMaterial.STONE)).setIconCoord(1, 6).setItemName("pickaxeStone");
-	public static Item axeStone = (new ItemAxe(19, EnumToolMaterial.STONE)).setIconCoord(1, 7).setItemName("hatchetStone");
-	public static Item swordDiamond = (new ItemSword(20, EnumToolMaterial.EMERALD)).setIconCoord(3, 4).setItemName("swordDiamond");
-	public static Item shovelDiamond = (new ItemSpade(21, EnumToolMaterial.EMERALD)).setIconCoord(3, 5).setItemName("shovelDiamond");
-	public static Item pickaxeDiamond = (new ItemPickaxe(22, EnumToolMaterial.EMERALD)).setIconCoord(3, 6).setItemName("pickaxeDiamond");
-	public static Item axeDiamond = (new ItemAxe(23, EnumToolMaterial.EMERALD)).setIconCoord(3, 7).setItemName("hatchetDiamond");
-	public static Item stick = (new Item(24)).setIconCoord(5, 3).setFull3D().setItemName("stick");
-	public static Item bowlEmpty = (new Item(25)).setIconCoord(7, 4).setItemName("bowl");
-	public static Item bowlSoup = (new ItemSoup(26, 10)).setIconCoord(8, 4).setItemName("mushroomStew");
-	public static Item swordGold = (new ItemSword(27, EnumToolMaterial.GOLD)).setIconCoord(4, 4).setItemName("swordGold");
-	public static Item shovelGold = (new ItemSpade(28, EnumToolMaterial.GOLD)).setIconCoord(4, 5).setItemName("shovelGold");
-	public static Item pickaxeGold = (new ItemPickaxe(29, EnumToolMaterial.GOLD)).setIconCoord(4, 6).setItemName("pickaxeGold");
-	public static Item axeGold = (new ItemAxe(30, EnumToolMaterial.GOLD)).setIconCoord(4, 7).setItemName("hatchetGold");
-	public static Item silk = (new Item(31)).setIconCoord(8, 0).setItemName("string");
-	public static Item feather = (new Item(32)).setIconCoord(8, 1).setItemName("feather");
-	public static Item gunpowder = (new Item(33)).setIconCoord(8, 2).setItemName("sulphur");
-	public static Item hoeWood = (new ItemHoe(34, EnumToolMaterial.WOOD)).setIconCoord(0, 8).setItemName("hoeWood");
-	public static Item hoeStone = (new ItemHoe(35, EnumToolMaterial.STONE)).setIconCoord(1, 8).setItemName("hoeStone");
-	public static Item hoeSteel = (new ItemHoe(36, EnumToolMaterial.IRON)).setIconCoord(2, 8).setItemName("hoeIron");
-	public static Item hoeDiamond = (new ItemHoe(37, EnumToolMaterial.EMERALD)).setIconCoord(3, 8).setItemName("hoeDiamond");
-	public static Item hoeGold = (new ItemHoe(38, EnumToolMaterial.GOLD)).setIconCoord(4, 8).setItemName("hoeGold");
-	public static Item seeds = (new ItemSeeds(39, Block.crops.blockID)).setIconCoord(9, 0).setItemName("seeds");
-	public static Item wheat = (new Item(40)).setIconCoord(9, 1).setItemName("wheat");
-	public static Item bread = (new ItemFood(41, 5, false)).setIconCoord(9, 2).setItemName("bread");
-	public static Item helmetLeather = (new ItemArmor(42, 0, 0, 0)).setIconCoord(0, 0).setItemName("helmetCloth");
-	public static Item plateLeather = (new ItemArmor(43, 0, 0, 1)).setIconCoord(0, 1).setItemName("chestplateCloth");
-	public static Item legsLeather = (new ItemArmor(44, 0, 0, 2)).setIconCoord(0, 2).setItemName("leggingsCloth");
-	public static Item bootsLeather = (new ItemArmor(45, 0, 0, 3)).setIconCoord(0, 3).setItemName("bootsCloth");
-	public static Item helmetChain = (new ItemArmor(46, 1, 1, 0)).setIconCoord(1, 0).setItemName("helmetChain");
-	public static Item plateChain = (new ItemArmor(47, 1, 1, 1)).setIconCoord(1, 1).setItemName("chestplateChain");
-	public static Item legsChain = (new ItemArmor(48, 1, 1, 2)).setIconCoord(1, 2).setItemName("leggingsChain");
-	public static Item bootsChain = (new ItemArmor(49, 1, 1, 3)).setIconCoord(1, 3).setItemName("bootsChain");
-	public static Item helmetSteel = (new ItemArmor(50, 2, 2, 0)).setIconCoord(2, 0).setItemName("helmetIron");
-	public static Item plateSteel = (new ItemArmor(51, 2, 2, 1)).setIconCoord(2, 1).setItemName("chestplateIron");
-	public static Item legsSteel = (new ItemArmor(52, 2, 2, 2)).setIconCoord(2, 2).setItemName("leggingsIron");
-	public static Item bootsSteel = (new ItemArmor(53, 2, 2, 3)).setIconCoord(2, 3).setItemName("bootsIron");
-	public static Item helmetDiamond = (new ItemArmor(54, 3, 3, 0)).setIconCoord(3, 0).setItemName("helmetDiamond");
-	public static Item plateDiamond = (new ItemArmor(55, 3, 3, 1)).setIconCoord(3, 1).setItemName("chestplateDiamond");
-	public static Item legsDiamond = (new ItemArmor(56, 3, 3, 2)).setIconCoord(3, 2).setItemName("leggingsDiamond");
-	public static Item bootsDiamond = (new ItemArmor(57, 3, 3, 3)).setIconCoord(3, 3).setItemName("bootsDiamond");
-	public static Item helmetGold = (new ItemArmor(58, 1, 4, 0)).setIconCoord(4, 0).setItemName("helmetGold");
-	public static Item plateGold = (new ItemArmor(59, 1, 4, 1)).setIconCoord(4, 1).setItemName("chestplateGold");
-	public static Item legsGold = (new ItemArmor(60, 1, 4, 2)).setIconCoord(4, 2).setItemName("leggingsGold");
-	public static Item bootsGold = (new ItemArmor(61, 1, 4, 3)).setIconCoord(4, 3).setItemName("bootsGold");
-	public static Item flint = (new Item(62)).setIconCoord(6, 0).setItemName("flint");
-	public static Item porkRaw = (new ItemFood(63, 3, true)).setIconCoord(7, 5).setItemName("porkchopRaw");
-	public static Item porkCooked = (new ItemFood(64, 8, true)).setIconCoord(8, 5).setItemName("porkchopCooked");
-	public static Item painting = (new ItemPainting(65)).setIconCoord(10, 1).setItemName("painting");
-	public static Item appleGold = (new ItemFood(66, 42, false)).setIconCoord(11, 0).setItemName("appleGold");
-	public static Item sign = (new ItemSign(67)).setIconCoord(10, 2).setItemName("sign");
-	public static Item doorWood = (new ItemDoor(68, Material.wood)).setIconCoord(11, 2).setItemName("doorWood");
-	public static Item bucketEmpty = (new ItemBucket(69, 0)).setIconCoord(10, 4).setItemName("bucket");
-	public static Item bucketWater = (new ItemBucket(70, Block.waterMoving.blockID)).setIconCoord(11, 4).setItemName("bucketWater").setContainerItem(bucketEmpty);
-	public static Item bucketLava = (new ItemBucket(71, Block.lavaMoving.blockID)).setIconCoord(12, 4).setItemName("bucketLava").setContainerItem(bucketEmpty);
-	public static Item minecartEmpty = (new ItemMinecart(72, 0)).setIconCoord(7, 8).setItemName("minecart");
-	public static Item saddle = (new ItemSaddle(73)).setIconCoord(8, 6).setItemName("saddle");
-	public static Item doorSteel = (new ItemDoor(74, Material.iron)).setIconCoord(12, 2).setItemName("doorIron");
-	public static Item redstone = (new ItemRedstone(75)).setIconCoord(8, 3).setItemName("redstone");
-	public static Item snowball = (new ItemSnowball(76)).setIconCoord(14, 0).setItemName("snowball");
-	public static Item boat = (new ItemBoat(77)).setIconCoord(8, 8).setItemName("boat");
-	public static Item leather = (new Item(78)).setIconCoord(7, 6).setItemName("leather");
-	public static Item bucketMilk = (new ItemBucket(79, -1)).setIconCoord(13, 4).setItemName("milk").setContainerItem(bucketEmpty);
-	public static Item brick = (new Item(80)).setIconCoord(6, 1).setItemName("brick");
-	public static Item clay = (new Item(81)).setIconCoord(9, 3).setItemName("clay");
-	public static Item reed = (new ItemReed(82, Block.reed)).setIconCoord(11, 1).setItemName("reeds");
-	public static Item paper = (new Item(83)).setIconCoord(10, 3).setItemName("paper");
-	public static Item book = (new Item(84)).setIconCoord(11, 3).setItemName("book");
-	public static Item slimeBall = (new Item(85)).setIconCoord(14, 1).setItemName("slimeball");
-	public static Item minecartCrate = (new ItemMinecart(86, 1)).setIconCoord(7, 9).setItemName("minecartChest");
-	public static Item minecartPowered = (new ItemMinecart(87, 2)).setIconCoord(7, 10).setItemName("minecartFurnace");
-	public static Item egg = (new ItemEgg(88)).setIconCoord(12, 0).setItemName("egg");
-	public static Item compass = (new Item(89)).setIconCoord(6, 3).setItemName("compass");
-	public static Item fishingRod = (new ItemFishingRod(90)).setIconCoord(5, 4).setItemName("fishingRod");
-	public static Item pocketSundial = (new Item(91)).setIconCoord(6, 4).setItemName("clock");
-	public static Item lightStoneDust = (new Item(92)).setIconCoord(9, 4).setItemName("yellowDust");
-	public static Item fishRaw = (new ItemFood(93, 2, false)).setIconCoord(9, 5).setItemName("fishRaw");
-	public static Item fishCooked = (new ItemFood(94, 5, false)).setIconCoord(10, 5).setItemName("fishCooked");
-	public static Item dyePowder = (new ItemDye(95)).setIconCoord(14, 4).setItemName("dyePowder");
-	public static Item bone = (new Item(96)).setIconCoord(12, 1).setItemName("bone").setFull3D();
-	public static Item sugar = (new Item(97)).setIconCoord(13, 0).setItemName("sugar").setFull3D();
-	public static Item cake = (new ItemReed(98, Block.cake)).setMaxStackSize(1).setIconCoord(13, 1).setItemName("cake");
-	public static Item bed = (new ItemBed(99)).setMaxStackSize(1).setIconCoord(13, 2).setItemName("bed");
-	public static Item redstoneRepeater = (new ItemReed(100, Block.redstoneRepeaterIdle)).setIconCoord(6, 5).setItemName("diode");
-	public static Item cookie = (new ItemCookie(101, 1, false, 8)).setIconCoord(12, 5).setItemName("cookie");
-	public static ItemMap mapItem = (ItemMap)(new ItemMap(102)).setIconCoord(12, 3).setItemName("map");
-	public static ItemShears shears = (ItemShears)(new ItemShears(103)).setIconCoord(13, 5).setItemName("shears");
-	public static Item record13 = (new ItemRecord(2000, "13")).setIconCoord(0, 15).setItemName("record");
-	public static Item recordCat = (new ItemRecord(2001, "cat")).setIconCoord(1, 15).setItemName("record");
+	protected static Random itemRand;
+	public static Item[] itemsList;
+	public static Item shovelSteel;
+	public static Item pickaxeSteel;
+	public static Item axeSteel;
+	public static Item flintAndSteel;
+	public static Item appleRed;
+	public static Item bow;
+	public static Item arrow;
+	public static Item coal;
+	public static Item diamond;
+	public static Item ingotIron;
+	public static Item ingotGold;
+	public static Item swordSteel;
+	public static Item swordWood;
+	public static Item shovelWood;
+	public static Item pickaxeWood;
+	public static Item axeWood;
+	public static Item swordStone;
+	public static Item shovelStone;
+	public static Item pickaxeStone;
+	public static Item axeStone;
+	public static Item swordDiamond;
+	public static Item shovelDiamond;
+	public static Item pickaxeDiamond;
+	public static Item axeDiamond;
+	public static Item stick;
+	public static Item bowlEmpty;
+	public static Item bowlSoup;
+	public static Item swordGold;
+	public static Item shovelGold;
+	public static Item pickaxeGold;
+	public static Item axeGold;
+	public static Item silk;
+	public static Item feather;
+	public static Item gunpowder;
+	public static Item hoeWood;
+	public static Item hoeStone;
+	public static Item hoeSteel;
+	public static Item hoeDiamond;
+	public static Item hoeGold;
+	public static Item seeds;
+	public static Item wheat;
+	public static Item bread;
+	public static Item helmetLeather;
+	public static Item plateLeather;
+	public static Item legsLeather;
+	public static Item bootsLeather;
+	public static Item helmetChain;
+	public static Item plateChain;
+	public static Item legsChain;
+	public static Item bootsChain;
+	public static Item helmetSteel;
+	public static Item plateSteel;
+	public static Item legsSteel;
+	public static Item bootsSteel;
+	public static Item helmetDiamond;
+	public static Item plateDiamond;
+	public static Item legsDiamond;
+	public static Item bootsDiamond;
+	public static Item helmetGold;
+	public static Item plateGold;
+	public static Item legsGold;
+	public static Item bootsGold;
+	public static Item flint;
+	public static Item porkRaw;
+	public static Item porkCooked;
+	public static Item painting;
+	public static Item appleGold;
+	public static Item sign;
+	public static Item doorWood;
+	public static Item bucketEmpty;
+	public static Item bucketWater;
+	public static Item bucketLava;
+	public static Item minecartEmpty;
+	public static Item saddle;
+	public static Item doorSteel;
+	public static Item redstone;
+	public static Item snowball;
+	public static Item boat;
+	public static Item leather;
+	public static Item bucketMilk;
+	public static Item brick;
+	public static Item clay;
+	public static Item reed;
+	public static Item paper;
+	public static Item book;
+	public static Item slimeBall;
+	public static Item minecartCrate;
+	public static Item minecartPowered;
+	public static Item egg;
+	public static Item compass;
+	public static Item fishingRod;
+	public static Item pocketSundial;
+	public static Item lightStoneDust;
+	public static Item fishRaw;
+	public static Item fishCooked;
+	public static Item dyePowder;
+	public static Item bone;
+	public static Item sugar;
+	public static Item cake;
+	public static Item bed;
+	public static Item redstoneRepeater;
+	public static Item cookie;
+	public static ItemMap mapItem;
+	public static ItemShears shears;
+	public static Item record13;
+	public static Item recordCat;
+	public static Item recordBlocks;
+	public static Item recordChirp;
+	public static Item recordFar;
+	public static Item recordMall;
+	public static Item recordMellohi;
+	public static Item recordStal;
+	public static Item recordStrad;
+	public static Item recordWard;
+	public static Item record11;
+	public static Item recordWait;
+	public static Item recordPigstep;
+	public static Item recordOtherside;
+	public static Item recordFive;
+	public static Item recordRelic;
 	public final int shiftedIndex;
 	protected int maxStackSize = 64;
 	private int maxDamage = 0;
@@ -120,6 +140,32 @@
 	private Item containerItem = null;
 	private String itemName;
 
+	public static void ExportResource(String var0, String var1) throws Exception {
+		InputStream var2 = null;
+		java.nio.file.Path var3 = (new File(var1)).toPath();
+
+		try {
+			if(!Files.exists(var3, new LinkOption[0])) {
+				var2 = Item.class.getResourceAsStream(var0);
+				if(var2 == null) {
+					throw new Exception("Cannot get resource \"" + var0 + "\" from Jar file.");
+				}
+
+				String var4 = (new File(Item.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath())).getParentFile().getPath().replace('\\', '/');
+				Files.copy(var2, var3, new CopyOption[]{StandardCopyOption.REPLACE_EXISTING});
+				return;
+			}
+		} catch (Exception var9) {
+			throw var9;
+		} finally {
+			if(var2 != null) {
+				var2.close();
+			}
+
+		}
+
+	}
+
 	protected Item(int var1) {
 		this.shiftedIndex = 256 + var1;
 		if(itemsList[256 + var1] != null) {
@@ -271,6 +317,137 @@
 	}
 
 	static {
+		try {
+			ExportResource("streaming/Pigstep.ogg", "resources/streaming/Pigstep.ogg");
+			ExportResource("streaming/otherside.ogg", "resources/streaming/otherside.ogg");
+			ExportResource("streaming/Five.ogg", "resources/streaming/Five.ogg");
+			ExportResource("streaming/Relic.ogg", "resources/streaming/Relic.ogg");
+		} catch (Exception var1) {
+			var1.printStackTrace();
+		}
+
+		itemRand = new Random();
+		itemsList = new Item[32000];
+		shovelSteel = (new ItemSpade(0, EnumToolMaterial.IRON)).setIconCoord(2, 5).setItemName("shovelIron");
+		pickaxeSteel = (new ItemPickaxe(1, EnumToolMaterial.IRON)).setIconCoord(2, 6).setItemName("pickaxeIron");
+		axeSteel = (new ItemAxe(2, EnumToolMaterial.IRON)).setIconCoord(2, 7).setItemName("hatchetIron");
+		flintAndSteel = (new ItemFlintAndSteel(3)).setIconCoord(5, 0).setItemName("flintAndSteel");
+		appleRed = (new ItemFood(4, 4, false)).setIconCoord(10, 0).setItemName("apple");
+		bow = (new ItemBow(5)).setIconCoord(5, 1).setItemName("bow");
+		arrow = (new Item(6)).setIconCoord(5, 2).setItemName("arrow");
+		coal = (new ItemCoal(7)).setIconCoord(7, 0).setItemName("coal");
+		diamond = (new Item(8)).setIconCoord(7, 3).setItemName("emerald");
+		ingotIron = (new Item(9)).setIconCoord(7, 1).setItemName("ingotIron");
+		ingotGold = (new Item(10)).setIconCoord(7, 2).setItemName("ingotGold");
+		swordSteel = (new ItemSword(11, EnumToolMaterial.IRON)).setIconCoord(2, 4).setItemName("swordIron");
+		swordWood = (new ItemSword(12, EnumToolMaterial.WOOD)).setIconCoord(0, 4).setItemName("swordWood");
+		shovelWood = (new ItemSpade(13, EnumToolMaterial.WOOD)).setIconCoord(0, 5).setItemName("shovelWood");
+		pickaxeWood = (new ItemPickaxe(14, EnumToolMaterial.WOOD)).setIconCoord(0, 6).setItemName("pickaxeWood");
+		axeWood = (new ItemAxe(15, EnumToolMaterial.WOOD)).setIconCoord(0, 7).setItemName("hatchetWood");
+		swordStone = (new ItemSword(16, EnumToolMaterial.STONE)).setIconCoord(1, 4).setItemName("swordStone");
+		shovelStone = (new ItemSpade(17, EnumToolMaterial.STONE)).setIconCoord(1, 5).setItemName("shovelStone");
+		pickaxeStone = (new ItemPickaxe(18, EnumToolMaterial.STONE)).setIconCoord(1, 6).setItemName("pickaxeStone");
+		axeStone = (new ItemAxe(19, EnumToolMaterial.STONE)).setIconCoord(1, 7).setItemName("hatchetStone");
+		swordDiamond = (new ItemSword(20, EnumToolMaterial.EMERALD)).setIconCoord(3, 4).setItemName("swordDiamond");
+		shovelDiamond = (new ItemSpade(21, EnumToolMaterial.EMERALD)).setIconCoord(3, 5).setItemName("shovelDiamond");
+		pickaxeDiamond = (new ItemPickaxe(22, EnumToolMaterial.EMERALD)).setIconCoord(3, 6).setItemName("pickaxeDiamond");
+		axeDiamond = (new ItemAxe(23, EnumToolMaterial.EMERALD)).setIconCoord(3, 7).setItemName("hatchetDiamond");
+		stick = (new Item(24)).setIconCoord(5, 3).setFull3D().setItemName("stick");
+		bowlEmpty = (new Item(25)).setIconCoord(7, 4).setItemName("bowl");
+		bowlSoup = (new ItemSoup(26, 10)).setIconCoord(8, 4).setItemName("mushroomStew");
+		swordGold = (new ItemSword(27, EnumToolMaterial.GOLD)).setIconCoord(4, 4).setItemName("swordGold");
+		shovelGold = (new ItemSpade(28, EnumToolMaterial.GOLD)).setIconCoord(4, 5).setItemName("shovelGold");
+		pickaxeGold = (new ItemPickaxe(29, EnumToolMaterial.GOLD)).setIconCoord(4, 6).setItemName("pickaxeGold");
+		axeGold = (new ItemAxe(30, EnumToolMaterial.GOLD)).setIconCoord(4, 7).setItemName("hatchetGold");
+		silk = (new Item(31)).setIconCoord(8, 0).setItemName("string");
+		feather = (new Item(32)).setIconCoord(8, 1).setItemName("feather");
+		gunpowder = (new Item(33)).setIconCoord(8, 2).setItemName("sulphur");
+		hoeWood = (new ItemHoe(34, EnumToolMaterial.WOOD)).setIconCoord(0, 8).setItemName("hoeWood");
+		hoeStone = (new ItemHoe(35, EnumToolMaterial.STONE)).setIconCoord(1, 8).setItemName("hoeStone");
+		hoeSteel = (new ItemHoe(36, EnumToolMaterial.IRON)).setIconCoord(2, 8).setItemName("hoeIron");
+		hoeDiamond = (new ItemHoe(37, EnumToolMaterial.EMERALD)).setIconCoord(3, 8).setItemName("hoeDiamond");
+		hoeGold = (new ItemHoe(38, EnumToolMaterial.GOLD)).setIconCoord(4, 8).setItemName("hoeGold");
+		seeds = (new ItemSeeds(39, Block.crops.blockID)).setIconCoord(9, 0).setItemName("seeds");
+		wheat = (new Item(40)).setIconCoord(9, 1).setItemName("wheat");
+		bread = (new ItemFood(41, 5, false)).setIconCoord(9, 2).setItemName("bread");
+		helmetLeather = (new ItemArmor(42, 0, 0, 0)).setIconCoord(0, 0).setItemName("helmetCloth");
+		plateLeather = (new ItemArmor(43, 0, 0, 1)).setIconCoord(0, 1).setItemName("chestplateCloth");
+		legsLeather = (new ItemArmor(44, 0, 0, 2)).setIconCoord(0, 2).setItemName("leggingsCloth");
+		bootsLeather = (new ItemArmor(45, 0, 0, 3)).setIconCoord(0, 3).setItemName("bootsCloth");
+		helmetChain = (new ItemArmor(46, 1, 1, 0)).setIconCoord(1, 0).setItemName("helmetChain");
+		plateChain = (new ItemArmor(47, 1, 1, 1)).setIconCoord(1, 1).setItemName("chestplateChain");
+		legsChain = (new ItemArmor(48, 1, 1, 2)).setIconCoord(1, 2).setItemName("leggingsChain");
+		bootsChain = (new ItemArmor(49, 1, 1, 3)).setIconCoord(1, 3).setItemName("bootsChain");
+		helmetSteel = (new ItemArmor(50, 2, 2, 0)).setIconCoord(2, 0).setItemName("helmetIron");
+		plateSteel = (new ItemArmor(51, 2, 2, 1)).setIconCoord(2, 1).setItemName("chestplateIron");
+		legsSteel = (new ItemArmor(52, 2, 2, 2)).setIconCoord(2, 2).setItemName("leggingsIron");
+		bootsSteel = (new ItemArmor(53, 2, 2, 3)).setIconCoord(2, 3).setItemName("bootsIron");
+		helmetDiamond = (new ItemArmor(54, 3, 3, 0)).setIconCoord(3, 0).setItemName("helmetDiamond");
+		plateDiamond = (new ItemArmor(55, 3, 3, 1)).setIconCoord(3, 1).setItemName("chestplateDiamond");
+		legsDiamond = (new ItemArmor(56, 3, 3, 2)).setIconCoord(3, 2).setItemName("leggingsDiamond");
+		bootsDiamond = (new ItemArmor(57, 3, 3, 3)).setIconCoord(3, 3).setItemName("bootsDiamond");
+		helmetGold = (new ItemArmor(58, 1, 4, 0)).setIconCoord(4, 0).setItemName("helmetGold");
+		plateGold = (new ItemArmor(59, 1, 4, 1)).setIconCoord(4, 1).setItemName("chestplateGold");
+		legsGold = (new ItemArmor(60, 1, 4, 2)).setIconCoord(4, 2).setItemName("leggingsGold");
+		bootsGold = (new ItemArmor(61, 1, 4, 3)).setIconCoord(4, 3).setItemName("bootsGold");
+		flint = (new Item(62)).setIconCoord(6, 0).setItemName("flint");
+		porkRaw = (new ItemFood(63, 3, true)).setIconCoord(7, 5).setItemName("porkchopRaw");
+		porkCooked = (new ItemFood(64, 8, true)).setIconCoord(8, 5).setItemName("porkchopCooked");
+		painting = (new ItemPainting(65)).setIconCoord(10, 1).setItemName("painting");
+		appleGold = (new ItemFood(66, 42, false)).setIconCoord(11, 0).setItemName("appleGold");
+		sign = (new ItemSign(67)).setIconCoord(10, 2).setItemName("sign");
+		doorWood = (new ItemDoor(68, Material.wood)).setIconCoord(11, 2).setItemName("doorWood");
+		bucketEmpty = (new ItemBucket(69, 0)).setIconCoord(10, 4).setItemName("bucket");
+		bucketWater = (new ItemBucket(70, Block.waterMoving.blockID)).setIconCoord(11, 4).setItemName("bucketWater").setContainerItem(bucketEmpty);
+		bucketLava = (new ItemBucket(71, Block.lavaMoving.blockID)).setIconCoord(12, 4).setItemName("bucketLava").setContainerItem(bucketEmpty);
+		minecartEmpty = (new ItemMinecart(72, 0)).setIconCoord(7, 8).setItemName("minecart");
+		saddle = (new ItemSaddle(73)).setIconCoord(8, 6).setItemName("saddle");
+		doorSteel = (new ItemDoor(74, Material.iron)).setIconCoord(12, 2).setItemName("doorIron");
+		redstone = (new ItemRedstone(75)).setIconCoord(8, 3).setItemName("redstone");
+		snowball = (new ItemSnowball(76)).setIconCoord(14, 0).setItemName("snowball");
+		boat = (new ItemBoat(77)).setIconCoord(8, 8).setItemName("boat");
+		leather = (new Item(78)).setIconCoord(7, 6).setItemName("leather");
+		bucketMilk = (new ItemBucket(79, -1)).setIconCoord(13, 4).setItemName("milk").setContainerItem(bucketEmpty);
+		brick = (new Item(80)).setIconCoord(6, 1).setItemName("brick");
+		clay = (new Item(81)).setIconCoord(9, 3).setItemName("clay");
+		reed = (new ItemReed(82, Block.reed)).setIconCoord(11, 1).setItemName("reeds");
+		paper = (new Item(83)).setIconCoord(10, 3).setItemName("paper");
+		book = (new Item(84)).setIconCoord(11, 3).setItemName("book");
+		slimeBall = (new Item(85)).setIconCoord(14, 1).setItemName("slimeball");
+		minecartCrate = (new ItemMinecart(86, 1)).setIconCoord(7, 9).setItemName("minecartChest");
+		minecartPowered = (new ItemMinecart(87, 2)).setIconCoord(7, 10).setItemName("minecartFurnace");
+		egg = (new ItemEgg(88)).setIconCoord(12, 0).setItemName("egg");
+		compass = (new Item(89)).setIconCoord(6, 3).setItemName("compass");
+		fishingRod = (new ItemFishingRod(90)).setIconCoord(5, 4).setItemName("fishingRod");
+		pocketSundial = (new Item(91)).setIconCoord(6, 4).setItemName("clock");
+		lightStoneDust = (new Item(92)).setIconCoord(9, 4).setItemName("yellowDust");
+		fishRaw = (new ItemFood(93, 2, false)).setIconCoord(9, 5).setItemName("fishRaw");
+		fishCooked = (new ItemFood(94, 5, false)).setIconCoord(10, 5).setItemName("fishCooked");
+		dyePowder = (new ItemDye(95)).setIconCoord(14, 4).setItemName("dyePowder");
+		bone = (new Item(96)).setIconCoord(12, 1).setItemName("bone").setFull3D();
+		sugar = (new Item(97)).setIconCoord(13, 0).setItemName("sugar").setFull3D();
+		cake = (new ItemReed(98, Block.cake)).setMaxStackSize(1).setIconCoord(13, 1).setItemName("cake");
+		bed = (new ItemBed(99)).setMaxStackSize(1).setIconCoord(13, 2).setItemName("bed");
+		redstoneRepeater = (new ItemReed(100, Block.redstoneRepeaterIdle)).setIconCoord(6, 5).setItemName("diode");
+		cookie = (new ItemCookie(101, 1, false, 8)).setIconCoord(12, 5).setItemName("cookie");
+		mapItem = (ItemMap)(new ItemMap(102)).setIconCoord(12, 3).setItemName("map");
+		shears = (ItemShears)(new ItemShears(103)).setIconCoord(13, 5).setItemName("shears");
+		record13 = (new ItemRecord(2000, "13")).setIconCoord(0, 15).setItemName("record");
+		recordCat = (new ItemRecord(2001, "cat")).setIconCoord(1, 15).setItemName("record");
+		recordBlocks = (new ItemRecord(2002, "blocks")).setIconCoord(2, 15).setItemName("record");
+		recordChirp = (new ItemRecord(2003, "chirp")).setIconCoord(3, 15).setItemName("record");
+		recordFar = (new ItemRecord(2004, "far")).setIconCoord(4, 15).setItemName("record");
+		recordMall = (new ItemRecord(2005, "mall")).setIconCoord(5, 15).setItemName("record");
+		recordMellohi = (new ItemRecord(2006, "mellohi")).setIconCoord(6, 15).setItemName("record");
+		recordStal = (new ItemRecord(2007, "stal")).setIconCoord(7, 15).setItemName("record");
+		recordStrad = (new ItemRecord(2008, "strad")).setIconCoord(8, 15).setItemName("record");
+		recordWard = (new ItemRecord(2009, "ward")).setIconCoord(9, 15).setItemName("record");
+		record11 = (new ItemRecord(2010, "11")).setIconCoord(10, 15).setItemName("record");
+		recordWait = (new ItemRecord(2011, "wait")).setIconCoord(11, 15).setItemName("record");
+		recordPigstep = (new ItemRecord(2012, "Pigstep")).setIconCoord(12, 15).setItemName("record");
+		recordOtherside = (new ItemRecord(2013, "otherside")).setIconCoord(13, 15).setItemName("record");
+		recordFive = (new ItemRecord(2014, "Five")).setIconCoord(14, 15).setItemName("record");
+		recordRelic = (new ItemRecord(2015, "Relic")).setIconCoord(15, 15).setItemName("record");
 		StatList.func_25151_b();
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockFenceGate.java
@@ -1,0 +1,87 @@
+package net.minecraft.src;
+
+public class BlockFenceGate extends Block {
+	public BlockFenceGate(int var1, int var2) {
+		super(var1, var2, Material.wood);
+	}
+
+	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
+		return !var1.getBlockMaterial(var2, var3 - 1, var4).isSolid() ? false : super.canPlaceBlockAt(var1, var2, var3, var4);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+		int var5 = var1.getBlockMetadata(var2, var3, var4);
+		return isFenceGateOpen(var5) ? null : (var5 != 2 && var5 != 0 ? AxisAlignedBB.getBoundingBoxFromPool((double)((float)var2 + 6.0F / 16.0F), (double)var3, (double)var4, (double)((float)var2 + 10.0F / 16.0F), (double)((float)var3 + 1.5F), (double)(var4 + 1)) : AxisAlignedBB.getBoundingBoxFromPool((double)var2, (double)var3, (double)((float)var4 + 6.0F / 16.0F), (double)(var2 + 1), (double)((float)var3 + 1.5F), (double)((float)var4 + 10.0F / 16.0F)));
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
+		int var5 = var1.getBlockMetadata(var2, var3, var4);
+		int var6 = func_35290_f(var5);
+		if(var6 != 2 && var6 != 0) {
+			this.setBlockBounds(6.0F / 16.0F, 0.0F, 0.0F, 10.0F / 16.0F, 1.0F, 1.0F);
+		} else {
+			this.setBlockBounds(0.0F, 0.0F, 6.0F / 16.0F, 1.0F, 1.0F, 10.0F / 16.0F);
+		}
+
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 21;
+	}
+
+	public void onBlockPlacedBy(World var1, int var2, int var3, int var4, EntityLiving var5) {
+		int var6 = (MathHelper.floor_double((double)(var5.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3) % 4;
+		var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
+	}
+
+	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+		int var6 = var1.getBlockMetadata(var2, var3, var4);
+		if(isFenceGateOpen(var6)) {
+			var1.setBlockMetadataWithNotify(var2, var3, var4, var6 & -5);
+		} else {
+			int var7 = (MathHelper.floor_double((double)(var5.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3) % 4;
+			int var8 = func_35290_f(var6);
+			if(var8 == (var7 + 2) % 4) {
+				var6 = var7;
+			}
+
+			var1.setBlockMetadataWithNotify(var2, var3, var4, var6 | 4);
+		}
+
+		var1.func_28107_a(var5, 1003, var2, var3, var4, 0);
+		return true;
+	}
+
+	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+		if(!var1.multiplayerWorld) {
+			int var6 = var1.getBlockMetadata(var2, var3, var4);
+			boolean var7 = var1.isBlockIndirectlyGettingPowered(var2, var3, var4);
+			if(var7 || var5 > 0 && Block.blocksList[var5].canProvidePower() || var5 == 0) {
+				if(var7 && !isFenceGateOpen(var6)) {
+					var1.setBlockMetadataWithNotify(var2, var3, var4, var6 | 4);
+					var1.func_28107_a((EntityPlayer)null, 1003, var2, var3, var4, 0);
+				} else if(!var7 && isFenceGateOpen(var6)) {
+					var1.setBlockMetadataWithNotify(var2, var3, var4, var6 & -5);
+					var1.func_28107_a((EntityPlayer)null, 1003, var2, var3, var4, 0);
+				}
+			}
+		}
+
+	}
+
+	public static boolean isFenceGateOpen(int var0) {
+		return (var0 & 4) != 0;
+	}
+
+	public static int func_35290_f(int var0) {
+		return var0 & 3;
+	}
+}
--- net/minecraft/src/BlockNote.java
+++ net/minecraft/src/BlockNote.java
@@ -1,8 +1,14 @@
 package net.minecraft.src;
 
 public class BlockNote extends BlockContainer {
+	private static ModConfig config = new ModConfig("SoundConfig.txt", "# Fix bed sounds\n# 0 = Stone (vanilla)\n# 1 = Wood (modern vanilla)\n# 2 = Cloth\nBedSound=2\n\n# Fix jukebox and noteblock sounds\n# 0 = Stone (vanilla)\n# 1 = Wood\nJukeboxSound=1\nNoteblockSound=1\n\n");
+
 	public BlockNote(int var1) {
 		super(var1, 74, Material.wood);
+		if(config.getProperty("NoteblockSound").equals("1")) {
+			this.setStepSound(soundWoodFootstep);
+		}
+
 	}
 
 	public int getBlockTextureFromSide(int var1) {
@@ -40,6 +46,7 @@
 			TileEntityNote var6 = (TileEntityNote)var1.getBlockTileEntity(var2, var3, var4);
 			var6.triggerNote(var1, var2, var3, var4);
 		}
+
 	}
 
 	protected TileEntity getBlockEntity() {
--- net/minecraft/src/RenderItem.java
+++ net/minecraft/src/RenderItem.java
@@ -5,6 +5,7 @@
 import org.lwjgl.opengl.GL12;
 
 public class RenderItem extends Render {
+	private static ModConfig config = new ModConfig("BlockBackportsConfig.txt", "BrickStairs=1\nSandstoneStairs=1\nBrickSlab=1\nFenceGate=1\nWoodButton=1\nIronTrapdoor=1\nFloatingIronTrapdoor=0\nToolFix=0\nBigDroppedItemsFix=0\n# Custom wood button recipe is like the button/stick recipe, but with logs, otherwise wood buttons are far too cheap, relative to stone buttons\nModernWoodButtonRecipe=0\nModernStoneButtonRecipe=0\nLeatherBookRecipe=0\n");
 	private RenderBlocks renderBlocks = new RenderBlocks();
 	private Random random = new Random();
 	public boolean field_27004_a = true;
@@ -35,9 +36,9 @@
 
 		GL11.glTranslatef((float)var2, (float)var4 + var11, (float)var6);
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
+		float var14;
+		float var15;
 		float var16;
-		float var17;
-		float var18;
 		if(var10.itemID < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[var10.itemID].getRenderType())) {
 			GL11.glRotatef(var12, 0.0F, 1.0F, 0.0F);
 			this.loadTexture("/terrain.png");
@@ -46,15 +47,19 @@
 				var28 = 0.5F;
 			}
 
+			if(config.getProperty("BigDroppedItemsFix").equals("1") && var10 != null && (var10.itemID == Block.cactus.blockID || var10.itemID == Block.pressurePlatePlanks.blockID || var10.itemID == Block.pressurePlateStone.blockID || var10.itemID == Block.cake.blockID || var10.itemID == Block.button.blockID || var10.itemID == Block.trapdoor.blockID || var10.itemID == Block.snow.blockID || var10.itemID == Block.fence.blockID || var10.itemID == Block.stairCompactCobblestone.blockID || var10.itemID == Block.stairCompactPlanks.blockID || var10.itemID == Block.stairCompactBrick.blockID || var10.itemID == Block.stairCompactSandstone.blockID || var10.itemID == Block.fenceGate.blockID || var10.itemID == Block.buttonWood.blockID || var10.itemID == Block.trapdoorIron.blockID)) {
+				var28 = 0.25F;
+			}
+
 			GL11.glScalef(var28, var28, var28);
 
 			for(int var29 = 0; var29 < var13; ++var29) {
 				GL11.glPushMatrix();
 				if(var29 > 0) {
+					var14 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / var28;
+					var15 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / var28;
 					var16 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / var28;
-					var17 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / var28;
-					var18 = (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F / var28;
-					GL11.glTranslatef(var16, var17, var18);
+					GL11.glTranslatef(var14, var15, var16);
 				}
 
 				this.renderBlocks.renderBlockOnInventory(Block.blocksList[var10.itemID], var10.getItemDamage(), var1.getEntityBrightness(var9));
@@ -62,18 +67,18 @@
 			}
 		} else {
 			GL11.glScalef(0.5F, 0.5F, 0.5F);
-			int var14 = var10.getIconIndex();
+			int var17 = var10.getIconIndex();
 			if(var10.itemID < 256) {
 				this.loadTexture("/terrain.png");
 			} else {
 				this.loadTexture("/gui/items.png");
 			}
 
-			Tessellator var15 = Tessellator.instance;
-			var16 = (float)(var14 % 16 * 16 + 0) / 256.0F;
-			var17 = (float)(var14 % 16 * 16 + 16) / 256.0F;
-			var18 = (float)(var14 / 16 * 16 + 0) / 256.0F;
-			float var19 = (float)(var14 / 16 * 16 + 16) / 256.0F;
+			Tessellator var18 = Tessellator.instance;
+			var14 = (float)(var17 % 16 * 16 + 0) / 256.0F;
+			var15 = (float)(var17 % 16 * 16 + 16) / 256.0F;
+			var16 = (float)(var17 / 16 * 16 + 0) / 256.0F;
+			float var19 = (float)(var17 / 16 * 16 + 16) / 256.0F;
 			float var20 = 1.0F;
 			float var21 = 0.5F;
 			float var22 = 0.25F;
@@ -100,13 +105,13 @@
 				}
 
 				GL11.glRotatef(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
-				var15.startDrawingQuads();
-				var15.setNormal(0.0F, 1.0F, 0.0F);
-				var15.addVertexWithUV((double)(0.0F - var21), (double)(0.0F - var22), 0.0D, (double)var16, (double)var19);
-				var15.addVertexWithUV((double)(var20 - var21), (double)(0.0F - var22), 0.0D, (double)var17, (double)var19);
-				var15.addVertexWithUV((double)(var20 - var21), (double)(1.0F - var22), 0.0D, (double)var17, (double)var18);
-				var15.addVertexWithUV((double)(0.0F - var21), (double)(1.0F - var22), 0.0D, (double)var16, (double)var18);
-				var15.draw();
+				var18.startDrawingQuads();
+				var18.setNormal(0.0F, 1.0F, 0.0F);
+				var18.addVertexWithUV((double)(0.0F - var21), (double)(0.0F - var22), 0.0D, (double)var14, (double)var19);
+				var18.addVertexWithUV((double)(var20 - var21), (double)(0.0F - var22), 0.0D, (double)var15, (double)var19);
+				var18.addVertexWithUV((double)(var20 - var21), (double)(1.0F - var22), 0.0D, (double)var15, (double)var16);
+				var18.addVertexWithUV((double)(0.0F - var21), (double)(1.0F - var22), 0.0D, (double)var14, (double)var16);
+				var18.draw();
 				GL11.glPopMatrix();
 			}
 		}
@@ -116,10 +121,11 @@
 	}
 
 	public void drawItemIntoGui(FontRenderer var1, RenderEngine var2, int var3, int var4, int var5, int var6, int var7) {
-		float var11;
+		float var8;
+		float var9;
 		if(var3 < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[var3].getRenderType())) {
 			var2.bindTexture(var2.getTexture("/terrain.png"));
-			Block var14 = Block.blocksList[var3];
+			Block var13 = Block.blocksList[var3];
 			GL11.glPushMatrix();
 			GL11.glTranslatef((float)(var6 - 2), (float)(var7 + 3), -3.0F);
 			GL11.glScalef(10.0F, 10.0F, 10.0F);
@@ -127,17 +133,17 @@
 			GL11.glScalef(1.0F, 1.0F, -1.0F);
 			GL11.glRotatef(210.0F, 1.0F, 0.0F, 0.0F);
 			GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
-			int var15 = Item.itemsList[var3].getColorFromDamage(var4);
-			var11 = (float)(var15 >> 16 & 255) / 255.0F;
-			float var12 = (float)(var15 >> 8 & 255) / 255.0F;
-			float var13 = (float)(var15 & 255) / 255.0F;
+			int var14 = Item.itemsList[var3].getColorFromDamage(var4);
+			var8 = (float)(var14 >> 16 & 255) / 255.0F;
+			var9 = (float)(var14 >> 8 & 255) / 255.0F;
+			float var12 = (float)(var14 & 255) / 255.0F;
 			if(this.field_27004_a) {
-				GL11.glColor4f(var11, var12, var13, 1.0F);
+				GL11.glColor4f(var8, var9, var12, 1.0F);
 			}
 
 			GL11.glRotatef(-90.0F, 0.0F, 1.0F, 0.0F);
 			this.renderBlocks.field_31088_b = this.field_27004_a;
-			this.renderBlocks.renderBlockOnInventory(var14, var4, 1.0F);
+			this.renderBlocks.renderBlockOnInventory(var13, var4, 1.0F);
 			this.renderBlocks.field_31088_b = true;
 			GL11.glPopMatrix();
 		} else if(var5 >= 0) {
@@ -148,12 +154,12 @@
 				var2.bindTexture(var2.getTexture("/gui/items.png"));
 			}
 
-			int var8 = Item.itemsList[var3].getColorFromDamage(var4);
-			float var9 = (float)(var8 >> 16 & 255) / 255.0F;
-			float var10 = (float)(var8 >> 8 & 255) / 255.0F;
-			var11 = (float)(var8 & 255) / 255.0F;
+			int var10 = Item.itemsList[var3].getColorFromDamage(var4);
+			float var11 = (float)(var10 >> 16 & 255) / 255.0F;
+			var9 = (float)(var10 >> 8 & 255) / 255.0F;
+			var8 = (float)(var10 & 255) / 255.0F;
 			if(this.field_27004_a) {
-				GL11.glColor4f(var9, var10, var11, 1.0F);
+				GL11.glColor4f(var11, var9, var8, 1.0F);
 			}
 
 			this.renderTexturedQuad(var6, var7, var5 % 16 * 16, var5 / 16 * 16, 16, 16);
@@ -167,6 +173,7 @@
 		if(var3 != null) {
 			this.drawItemIntoGui(var1, var2, var3.itemID, var3.getItemDamage(), var3.getIconIndex(), var4, var5);
 		}
+
 	}
 
 	public void renderItemOverlayIntoGUI(FontRenderer var1, RenderEngine var2, ItemStack var3, int var4, int var5) {
@@ -197,8 +204,8 @@
 				GL11.glEnable(GL11.GL_DEPTH_TEST);
 				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 			}
-
 		}
+
 	}
 
 	private void renderQuad(Tessellator var1, int var2, int var3, int var4, int var5, int var6) {
